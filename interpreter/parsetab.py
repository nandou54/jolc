
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftop_rangorightop_ternarialeftorleftandleftigualaciondiferenciacionleftmenormenor_igualmayormayor_igualleftmasmenosleftasteriscobarramodulorightcaretrightop_negacionnotleftop_llamadaleftop_accesononassocop_agrupacionBool Char Float64 Int64 Nothing String and asterisco barra bool break caret char coma continue corA corB diferenciacion dospuntos else elseif end float64 for function global id if igual igualacion in int64 interrog local mas mayor mayor_igual menor menor_igual menos modulo mutable not or parA parB punto puntoycoma return string struct tipo while\n  INS : INS I puntoycoma\n      | I puntoycoma\n  \n  INS : INS error puntoycoma\n      | error puntoycoma\n  \n  I : ASIGNACION\n    | FUNCION\n    | STRUCT\n    | LLAMADA\n    | IF\n    | WHILE\n    | FOR\n    | BREAK\n    | CONTINUE\n    | RETURN\n  \n  BLOQUE  : INS end\n  \n  BLOQUE_ABIERTO  : INS\n  \n  TIPO  : Int64\n        | Float64\n        | Bool\n        | Char\n        | String\n  \n  SCOPE : local\n        | global\n  \n  ASIGNACION  : ID igual ASIGNACION_VALOR\n              | SCOPE id igual ASIGNACION_VALOR\n              | SCOPE id\n  \n  ASIGNACION_VALOR  : E\n                    | E tipo TIPO\n  \n  ID  : ID punto id\n      | ID corA E corB\n      | id\n  \n  FUNCION : function id parA PAR parB BLOQUE\n          | function id parA parB BLOQUE\n  \n  PAR : PAR coma P\n      | P\n  \n  P : id\n  \n  STRUCT  : struct id ATR end\n          | mutable struct id ATR end\n  \n  ATR : ATR A\n      | A\n  \n  A : id tipo TIPO puntoycoma\n    | id puntoycoma\n  \n  EXP : EXP coma E\n      | E\n  \n  E : E mas E\n    | E menos E\n    | E asterisco E\n    | E barra E\n    | E caret E\n    | E modulo E\n    | menos E                     %prec op_negacion\n    | E mayor E\n    | E menor E\n    | E mayor_igual E\n    | E menor_igual E\n    | E igualacion E\n    | E diferenciacion E\n    | E or E\n    | E and E\n    | not E\n    | E interrog E dospuntos E  %prec op_ternaria\n    | ID                        %prec op_acceso\n    | parA E parB               %prec op_agrupacion\n    | LLAMADA                   %prec op_llamada\n    | RANGO                     %prec op_rango\n    | ARREGLO\n    | int64\n    | float64\n    | bool\n    | char\n    | string\n    | Nothing\n  \n  ARREGLO : corA EXP corB\n          | corA corB\n  \n  LLAMADA : id parA EXP parB\n          | id parA parB\n  \n  IF  : if E BLOQUE\n      | if E BLOQUE_ABIERTO ELSE\n      | if E BLOQUE_ABIERTO ELSEIF\n  \n  ELSEIF  : elseif E BLOQUE\n          | elseif E BLOQUE_ABIERTO ELSEIF\n          | elseif E BLOQUE_ABIERTO ELSE\n  \n  ELSE : else BLOQUE\n  \n  WHILE : while E BLOQUE\n  \n  FOR : for id in E BLOQUE\n  \n  RANGO : E dospuntos E\n        | dospuntos\n  \n  BREAK : break\n  \n  CONTINUE : continue\n  \n  RETURN  : return E\n          | return\n  '
    
_lr_action_items = {'error':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[3,29,-2,-4,3,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,3,-1,-3,-29,-76,29,-51,-60,-74,29,-30,-75,3,3,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,3,3,3,-61,]),'function':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[17,17,-2,-4,17,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,17,-1,-3,-29,-76,17,-51,-60,-74,17,-30,-75,17,17,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,17,17,17,-61,]),'struct':([0,1,19,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[18,18,39,-2,-4,18,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,18,-1,-3,-29,-76,18,-51,-60,-74,18,-30,-75,18,18,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,18,18,18,-61,]),'mutable':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[19,19,-2,-4,19,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,19,-1,-3,-29,-76,19,-51,-60,-74,19,-30,-75,19,19,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,19,19,19,-61,]),'id':([0,1,15,17,18,20,21,22,25,26,27,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,64,66,68,70,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,98,100,101,103,105,106,109,112,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,148,153,154,158,161,],[16,16,35,37,38,55,55,58,55,-22,-23,-2,-4,55,64,55,55,71,74,16,55,55,-87,-62,55,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,55,16,-1,-3,-29,55,-76,107,71,-40,71,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,16,-51,-60,-74,16,55,-30,-75,55,16,-42,-39,71,16,55,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,16,16,107,16,55,-41,-61,]),'if':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[20,20,-2,-4,20,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,20,-1,-3,-29,-76,20,-51,-60,-74,20,-30,-75,20,20,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,20,20,20,-61,]),'while':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[21,21,-2,-4,21,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,21,-1,-3,-29,-76,21,-51,-60,-74,21,-30,-75,21,21,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,21,21,21,-61,]),'for':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[22,22,-2,-4,22,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,22,-1,-3,-29,-76,22,-51,-60,-74,22,-30,-75,22,22,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,22,22,22,-61,]),'break':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[23,23,-2,-4,23,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,23,-1,-3,-29,-76,23,-51,-60,-74,23,-30,-75,23,23,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,23,23,23,-61,]),'continue':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[24,24,-2,-4,24,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,24,-1,-3,-29,-76,24,-51,-60,-74,24,-30,-75,24,24,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,24,24,24,-61,]),'return':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[25,25,-2,-4,25,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,25,-1,-3,-29,-76,25,-51,-60,-74,25,-30,-75,25,25,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,25,25,25,-61,]),'local':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[26,26,-2,-4,26,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,26,-1,-3,-29,-76,26,-51,-60,-74,26,-30,-75,26,26,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,26,26,26,-61,]),'global':([0,1,30,31,40,43,44,46,47,48,49,50,51,52,53,54,55,57,60,61,64,68,93,94,95,98,100,103,105,109,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,139,147,153,161,],[27,27,-2,-4,27,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,27,-1,-3,-29,-76,27,-51,-60,-74,27,-30,-75,27,27,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,27,27,27,-61,]),'$end':([1,30,31,60,61,],[0,-2,-4,-1,-3,]),'puntoycoma':([2,3,4,5,6,7,8,9,10,11,12,13,23,24,25,28,29,35,43,44,46,47,48,49,50,51,52,53,54,55,59,62,63,64,68,71,75,94,95,98,99,103,104,105,113,116,117,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,137,138,140,141,142,143,144,145,149,150,151,152,155,156,159,161,162,163,],[30,31,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-88,-89,-91,60,61,-26,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,-90,-24,-27,-29,-76,112,-77,-51,-60,-74,-84,-30,-25,-75,-37,-78,-79,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-15,-63,-73,-28,-17,-18,-19,-20,-21,-33,158,-38,-83,-85,-32,-80,-61,-81,-82,]),'igual':([14,16,35,64,103,],[32,-31,66,-29,-30,]),'punto':([14,16,44,55,64,103,],[33,-31,33,-31,-29,-30,]),'corA':([14,16,20,21,25,32,34,36,41,42,44,45,55,56,64,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,103,106,119,154,],[34,-31,56,56,56,56,56,56,56,56,34,56,-31,56,-29,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-30,56,56,56,]),'parA':([16,20,21,25,32,34,36,37,41,42,45,55,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[36,45,45,45,45,45,45,70,45,45,45,36,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'menos':([20,21,25,32,34,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,63,64,65,66,68,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,101,103,105,106,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,154,161,],[41,41,41,41,41,41,78,41,41,-87,-62,41,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,41,78,78,78,-29,78,41,-76,78,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-51,-60,78,-74,41,-30,-75,41,41,-45,-46,-47,-48,-49,-50,78,78,78,78,78,78,78,78,78,78,-63,-73,78,78,78,41,78,]),'not':([20,21,25,32,34,36,41,42,45,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'int64':([20,21,25,32,34,36,41,42,45,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'float64':([20,21,25,32,34,36,41,42,45,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'bool':([20,21,25,32,34,36,41,42,45,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'char':([20,21,25,32,34,36,41,42,45,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'string':([20,21,25,32,34,36,41,42,45,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'Nothing':([20,21,25,32,34,36,41,42,45,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'dospuntos':([20,21,25,32,34,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,63,64,65,66,68,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,98,101,103,105,106,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,154,161,],[43,43,43,43,43,43,92,43,43,-87,-62,43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,43,92,92,92,-29,92,43,-76,92,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-51,-60,92,-74,43,-30,-75,43,43,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,154,92,-63,-73,92,92,92,43,-61,]),'end':([30,31,60,61,72,73,93,100,112,114,115,158,],[-2,-4,-1,-3,113,-40,136,136,-42,-39,151,-41,]),'else':([30,31,60,61,76,93,160,],[-2,-4,-1,-3,118,-16,118,]),'elseif':([30,31,60,61,76,93,160,],[-2,-4,-1,-3,119,-16,119,]),'parB':([36,43,44,46,47,48,49,50,51,52,53,54,55,64,67,68,69,70,94,95,96,98,103,105,107,108,110,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,146,157,161,],[68,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,-29,105,-76,-44,109,-51,-60,137,-74,-30,-75,-36,147,-35,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,-43,-34,-61,]),'mas':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[77,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,77,77,77,-29,77,-76,77,-51,-60,77,-74,-30,-75,-45,-46,-47,-48,-49,-50,77,77,77,77,77,77,77,77,77,77,-63,-73,77,77,77,77,]),'asterisco':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[79,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,79,79,79,-29,79,-76,79,-51,-60,79,-74,-30,-75,79,79,-47,-48,-49,-50,79,79,79,79,79,79,79,79,79,79,-63,-73,79,79,79,79,]),'barra':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[80,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,80,80,80,-29,80,-76,80,-51,-60,80,-74,-30,-75,80,80,-47,-48,-49,-50,80,80,80,80,80,80,80,80,80,80,-63,-73,80,80,80,80,]),'caret':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[81,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,81,81,81,-29,81,-76,81,-51,-60,81,-74,-30,-75,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-63,-73,81,81,81,81,]),'modulo':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[82,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,82,82,82,-29,82,-76,82,-51,-60,82,-74,-30,-75,82,82,-47,-48,-49,-50,82,82,82,82,82,82,82,82,82,82,-63,-73,82,82,82,82,]),'mayor':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[83,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,83,83,83,-29,83,-76,83,-51,-60,83,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,83,83,83,83,83,83,-63,-73,83,83,83,83,]),'menor':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[84,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,84,84,84,-29,84,-76,84,-51,-60,84,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,84,84,84,84,84,84,-63,-73,84,84,84,84,]),'mayor_igual':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[85,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,85,85,85,-29,85,-76,85,-51,-60,85,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,85,85,85,85,85,85,-63,-73,85,85,85,85,]),'menor_igual':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[86,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,86,86,86,-29,86,-76,86,-51,-60,86,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,86,86,86,86,86,86,-63,-73,86,86,86,86,]),'igualacion':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[87,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,87,87,87,-29,87,-76,87,-51,-60,87,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,87,87,87,87,-63,-73,87,87,87,87,]),'diferenciacion':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[88,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,88,88,88,-29,88,-76,88,-51,-60,88,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,88,88,88,88,-63,-73,88,88,88,88,]),'or':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[89,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,89,89,89,-29,89,-76,89,-51,-60,89,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,89,89,-63,-73,89,89,89,89,]),'and':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[90,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,90,90,90,-29,90,-76,90,-51,-60,90,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,90,-59,90,90,-63,-73,90,90,90,90,]),'interrog':([40,43,44,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,68,69,94,95,96,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,146,153,161,],[91,-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,91,91,91,-29,91,-76,91,-51,-60,91,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,91,91,-63,-73,91,91,91,-61,]),'tipo':([43,44,46,47,48,49,50,51,52,53,54,55,63,64,68,71,94,95,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,161,],[-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,102,-29,-76,111,-51,-60,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,-61,]),'corB':([43,44,46,47,48,49,50,51,52,53,54,55,56,64,65,68,69,94,95,97,98,103,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,146,161,],[-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,98,-29,103,-76,-44,-51,-60,138,-74,-30,-75,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,-43,-61,]),'coma':([43,44,46,47,48,49,50,51,52,53,54,55,64,67,68,69,94,95,97,98,103,105,107,108,110,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,138,146,157,161,],[-87,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-31,-29,106,-76,-44,-51,-60,106,-74,-30,-75,-36,148,-35,-45,-46,-47,-48,-49,-50,-52,-53,-54,-55,-56,-57,-58,-59,-86,-63,-73,-43,-34,-61,]),'in':([58,],[101,]),'Int64':([102,111,],[141,141,]),'Float64':([102,111,],[142,142,]),'Bool':([102,111,],[143,143,]),'Char':([102,111,],[144,144,]),'String':([102,111,],[145,145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INS':([0,40,57,109,118,139,147,153,],[1,93,100,100,100,100,100,93,]),'I':([0,1,40,57,93,100,109,118,139,147,153,],[2,28,2,2,28,28,2,2,2,2,2,]),'ASIGNACION':([0,1,40,57,93,100,109,118,139,147,153,],[4,4,4,4,4,4,4,4,4,4,4,]),'FUNCION':([0,1,40,57,93,100,109,118,139,147,153,],[5,5,5,5,5,5,5,5,5,5,5,]),'STRUCT':([0,1,40,57,93,100,109,118,139,147,153,],[6,6,6,6,6,6,6,6,6,6,6,]),'LLAMADA':([0,1,20,21,25,32,34,36,40,41,42,45,56,57,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,100,101,106,109,118,119,139,147,153,154,],[7,7,46,46,46,46,46,46,7,46,46,46,46,7,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,7,7,46,46,7,7,46,7,7,7,46,]),'IF':([0,1,40,57,93,100,109,118,139,147,153,],[8,8,8,8,8,8,8,8,8,8,8,]),'WHILE':([0,1,40,57,93,100,109,118,139,147,153,],[9,9,9,9,9,9,9,9,9,9,9,]),'FOR':([0,1,40,57,93,100,109,118,139,147,153,],[10,10,10,10,10,10,10,10,10,10,10,]),'BREAK':([0,1,40,57,93,100,109,118,139,147,153,],[11,11,11,11,11,11,11,11,11,11,11,]),'CONTINUE':([0,1,40,57,93,100,109,118,139,147,153,],[12,12,12,12,12,12,12,12,12,12,12,]),'RETURN':([0,1,40,57,93,100,109,118,139,147,153,],[13,13,13,13,13,13,13,13,13,13,13,]),'ID':([0,1,20,21,25,32,34,36,40,41,42,45,56,57,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,100,101,106,109,118,119,139,147,153,154,],[14,14,44,44,44,44,44,44,14,44,44,44,44,14,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,14,14,44,44,14,14,44,14,14,14,44,]),'SCOPE':([0,1,40,57,93,100,109,118,139,147,153,],[15,15,15,15,15,15,15,15,15,15,15,]),'E':([20,21,25,32,34,36,41,42,45,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[40,57,59,63,65,69,94,95,96,69,63,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,139,146,153,161,]),'RANGO':([20,21,25,32,34,36,41,42,45,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'ARREGLO':([20,21,25,32,34,36,41,42,45,56,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101,106,119,154,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'ASIGNACION_VALOR':([32,66,],[62,104,]),'EXP':([36,56,],[67,97,]),'ATR':([38,74,],[72,115,]),'A':([38,72,74,115,],[73,114,73,114,]),'BLOQUE':([40,57,109,118,139,147,153,],[75,99,149,152,155,156,159,]),'BLOQUE_ABIERTO':([40,153,],[76,160,]),'PAR':([70,],[108,]),'P':([70,148,],[110,157,]),'ELSE':([76,160,],[116,163,]),'ELSEIF':([76,160,],[117,162,]),'TIPO':([102,111,],[140,150,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INS","S'",1,None,None,None),
  ('INS -> INS I puntoycoma','INS',3,'p_INS','analyzer.py',208),
  ('INS -> I puntoycoma','INS',2,'p_INS','analyzer.py',209),
  ('INS -> INS error puntoycoma','INS',3,'p_INS_error','analyzer.py',219),
  ('INS -> error puntoycoma','INS',2,'p_INS_error','analyzer.py',220),
  ('I -> ASIGNACION','I',1,'p_I','analyzer.py',229),
  ('I -> FUNCION','I',1,'p_I','analyzer.py',230),
  ('I -> STRUCT','I',1,'p_I','analyzer.py',231),
  ('I -> LLAMADA','I',1,'p_I','analyzer.py',232),
  ('I -> IF','I',1,'p_I','analyzer.py',233),
  ('I -> WHILE','I',1,'p_I','analyzer.py',234),
  ('I -> FOR','I',1,'p_I','analyzer.py',235),
  ('I -> BREAK','I',1,'p_I','analyzer.py',236),
  ('I -> CONTINUE','I',1,'p_I','analyzer.py',237),
  ('I -> RETURN','I',1,'p_I','analyzer.py',238),
  ('BLOQUE -> INS end','BLOQUE',2,'p_BLOQUE','analyzer.py',244),
  ('BLOQUE_ABIERTO -> INS','BLOQUE_ABIERTO',1,'p_BLOQUE_ABIERTO','analyzer.py',250),
  ('TIPO -> Int64','TIPO',1,'p_TIPO','analyzer.py',256),
  ('TIPO -> Float64','TIPO',1,'p_TIPO','analyzer.py',257),
  ('TIPO -> Bool','TIPO',1,'p_TIPO','analyzer.py',258),
  ('TIPO -> Char','TIPO',1,'p_TIPO','analyzer.py',259),
  ('TIPO -> String','TIPO',1,'p_TIPO','analyzer.py',260),
  ('SCOPE -> local','SCOPE',1,'p_SCOPE','analyzer.py',266),
  ('SCOPE -> global','SCOPE',1,'p_SCOPE','analyzer.py',267),
  ('ASIGNACION -> ID igual ASIGNACION_VALOR','ASIGNACION',3,'p_ASIGNACION','analyzer.py',273),
  ('ASIGNACION -> SCOPE id igual ASIGNACION_VALOR','ASIGNACION',4,'p_ASIGNACION','analyzer.py',274),
  ('ASIGNACION -> SCOPE id','ASIGNACION',2,'p_ASIGNACION','analyzer.py',275),
  ('ASIGNACION_VALOR -> E','ASIGNACION_VALOR',1,'p_ASIGNACION_VALOR','analyzer.py',294),
  ('ASIGNACION_VALOR -> E tipo TIPO','ASIGNACION_VALOR',3,'p_ASIGNACION_VALOR','analyzer.py',295),
  ('ID -> ID punto id','ID',3,'p_ID','analyzer.py',304),
  ('ID -> ID corA E corB','ID',4,'p_ID','analyzer.py',305),
  ('ID -> id','ID',1,'p_ID','analyzer.py',306),
  ('FUNCION -> function id parA PAR parB BLOQUE','FUNCION',6,'p_FUNCION','analyzer.py',318),
  ('FUNCION -> function id parA parB BLOQUE','FUNCION',5,'p_FUNCION','analyzer.py',319),
  ('PAR -> PAR coma P','PAR',3,'p_PAR','analyzer.py',331),
  ('PAR -> P','PAR',1,'p_PAR','analyzer.py',332),
  ('P -> id','P',1,'p_P','analyzer.py',341),
  ('STRUCT -> struct id ATR end','STRUCT',4,'p_STRUCT','analyzer.py',347),
  ('STRUCT -> mutable struct id ATR end','STRUCT',5,'p_STRUCT','analyzer.py',348),
  ('ATR -> ATR A','ATR',2,'p_ATR','analyzer.py',361),
  ('ATR -> A','ATR',1,'p_ATR','analyzer.py',362),
  ('A -> id tipo TIPO puntoycoma','A',4,'p_A','analyzer.py',371),
  ('A -> id puntoycoma','A',2,'p_A','analyzer.py',372),
  ('EXP -> EXP coma E','EXP',3,'p_EXP','analyzer.py',383),
  ('EXP -> E','EXP',1,'p_EXP','analyzer.py',384),
  ('E -> E mas E','E',3,'p_E','analyzer.py',393),
  ('E -> E menos E','E',3,'p_E','analyzer.py',394),
  ('E -> E asterisco E','E',3,'p_E','analyzer.py',395),
  ('E -> E barra E','E',3,'p_E','analyzer.py',396),
  ('E -> E caret E','E',3,'p_E','analyzer.py',397),
  ('E -> E modulo E','E',3,'p_E','analyzer.py',398),
  ('E -> menos E','E',2,'p_E','analyzer.py',399),
  ('E -> E mayor E','E',3,'p_E','analyzer.py',400),
  ('E -> E menor E','E',3,'p_E','analyzer.py',401),
  ('E -> E mayor_igual E','E',3,'p_E','analyzer.py',402),
  ('E -> E menor_igual E','E',3,'p_E','analyzer.py',403),
  ('E -> E igualacion E','E',3,'p_E','analyzer.py',404),
  ('E -> E diferenciacion E','E',3,'p_E','analyzer.py',405),
  ('E -> E or E','E',3,'p_E','analyzer.py',406),
  ('E -> E and E','E',3,'p_E','analyzer.py',407),
  ('E -> not E','E',2,'p_E','analyzer.py',408),
  ('E -> E interrog E dospuntos E','E',5,'p_E','analyzer.py',409),
  ('E -> ID','E',1,'p_E','analyzer.py',410),
  ('E -> parA E parB','E',3,'p_E','analyzer.py',411),
  ('E -> LLAMADA','E',1,'p_E','analyzer.py',412),
  ('E -> RANGO','E',1,'p_E','analyzer.py',413),
  ('E -> ARREGLO','E',1,'p_E','analyzer.py',414),
  ('E -> int64','E',1,'p_E','analyzer.py',415),
  ('E -> float64','E',1,'p_E','analyzer.py',416),
  ('E -> bool','E',1,'p_E','analyzer.py',417),
  ('E -> char','E',1,'p_E','analyzer.py',418),
  ('E -> string','E',1,'p_E','analyzer.py',419),
  ('E -> Nothing','E',1,'p_E','analyzer.py',420),
  ('ARREGLO -> corA EXP corB','ARREGLO',3,'p_ARREGLO','analyzer.py',452),
  ('ARREGLO -> corA corB','ARREGLO',2,'p_ARREGLO','analyzer.py',453),
  ('LLAMADA -> id parA EXP parB','LLAMADA',4,'p_LLAMADA','analyzer.py',461),
  ('LLAMADA -> id parA parB','LLAMADA',3,'p_LLAMADA','analyzer.py',462),
  ('IF -> if E BLOQUE','IF',3,'p_IF','analyzer.py',473),
  ('IF -> if E BLOQUE_ABIERTO ELSE','IF',4,'p_IF','analyzer.py',474),
  ('IF -> if E BLOQUE_ABIERTO ELSEIF','IF',4,'p_IF','analyzer.py',475),
  ('ELSEIF -> elseif E BLOQUE','ELSEIF',3,'p_ELSEIF','analyzer.py',486),
  ('ELSEIF -> elseif E BLOQUE_ABIERTO ELSEIF','ELSEIF',4,'p_ELSEIF','analyzer.py',487),
  ('ELSEIF -> elseif E BLOQUE_ABIERTO ELSE','ELSEIF',4,'p_ELSEIF','analyzer.py',488),
  ('ELSE -> else BLOQUE','ELSE',2,'p_ELSE','analyzer.py',499),
  ('WHILE -> while E BLOQUE','WHILE',3,'p_WHILE','analyzer.py',506),
  ('FOR -> for id in E BLOQUE','FOR',5,'p_FOR','analyzer.py',513),
  ('RANGO -> E dospuntos E','RANGO',3,'p_RANGO','analyzer.py',520),
  ('RANGO -> dospuntos','RANGO',1,'p_RANGO','analyzer.py',521),
  ('BREAK -> break','BREAK',1,'p_BREAK','analyzer.py',530),
  ('CONTINUE -> continue','CONTINUE',1,'p_CONTINUE','analyzer.py',536),
  ('RETURN -> return E','RETURN',2,'p_RETURN','analyzer.py',542),
  ('RETURN -> return','RETURN',1,'p_RETURN','analyzer.py',543),
]
