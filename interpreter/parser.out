Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> INS
Rule 1     INS -> INS I puntoycoma
Rule 2     INS -> I puntoycoma
Rule 3     INS -> INS error puntoycoma
Rule 4     INS -> error puntoycoma
Rule 5     I -> ASIGNACION
Rule 6     I -> FUNCION
Rule 7     I -> STRUCT
Rule 8     I -> LLAMADA
Rule 9     I -> IF
Rule 10    I -> WHILE
Rule 11    I -> FOR
Rule 12    I -> BREAK
Rule 13    I -> CONTINUE
Rule 14    I -> RETURN
Rule 15    BLOQUE -> INS end
Rule 16    BLOQUE_ABIERTO -> INS
Rule 17    TIPO -> Int64
Rule 18    TIPO -> Float64
Rule 19    TIPO -> Bool
Rule 20    TIPO -> Char
Rule 21    TIPO -> String
Rule 22    SCOPE -> local
Rule 23    SCOPE -> global
Rule 24    ASIGNACION -> ID igual ASIGNACION_VALOR
Rule 25    ASIGNACION -> SCOPE id igual ASIGNACION_VALOR
Rule 26    ASIGNACION -> SCOPE id
Rule 27    ASIGNACION_VALOR -> E
Rule 28    ASIGNACION_VALOR -> E tipo TIPO
Rule 29    ID -> ID punto id
Rule 30    ID -> ID corA E corB
Rule 31    ID -> id
Rule 32    FUNCION -> function id parA PAR parB BLOQUE
Rule 33    FUNCION -> function id parA parB BLOQUE
Rule 34    PAR -> PAR coma P
Rule 35    PAR -> P
Rule 36    P -> id
Rule 37    P -> id tipo TIPO
Rule 38    STRUCT -> struct id ATR end
Rule 39    STRUCT -> mutable struct id ATR end
Rule 40    ATR -> ATR A
Rule 41    ATR -> A
Rule 42    A -> id tipo TIPO puntoycoma
Rule 43    A -> id puntoycoma
Rule 44    EXP -> EXP coma E
Rule 45    EXP -> E
Rule 46    E -> E mas E
Rule 47    E -> E menos E
Rule 48    E -> E asterisco E
Rule 49    E -> E barra E
Rule 50    E -> E caret E
Rule 51    E -> E modulo E
Rule 52    E -> menos E
Rule 53    E -> E mayor E
Rule 54    E -> E menor E
Rule 55    E -> E mayor_igual E
Rule 56    E -> E menor_igual E
Rule 57    E -> E igualacion E
Rule 58    E -> E diferenciacion E
Rule 59    E -> E or E
Rule 60    E -> E and E
Rule 61    E -> not E
Rule 62    E -> E interrog E dospuntos E
Rule 63    E -> ID
Rule 64    E -> parA E parB
Rule 65    E -> LLAMADA
Rule 66    E -> RANGO
Rule 67    E -> ARREGLO
Rule 68    E -> int64
Rule 69    E -> float64
Rule 70    E -> bool
Rule 71    E -> char
Rule 72    E -> STRING
Rule 73    E -> Nothing
Rule 74    STRING -> STRING S
Rule 75    STRING -> S
Rule 76    S -> string
Rule 77    S -> llaveA E llaveB
Rule 78    ARREGLO -> corA EXP corB
Rule 79    ARREGLO -> corA corB
Rule 80    LLAMADA -> id parA EXP parB
Rule 81    LLAMADA -> id parA parB
Rule 82    IF -> if E BLOQUE
Rule 83    IF -> if E BLOQUE_ABIERTO ELSE
Rule 84    IF -> if E BLOQUE_ABIERTO ELSEIF
Rule 85    ELSEIF -> elseif E BLOQUE
Rule 86    ELSEIF -> elseif E BLOQUE_ABIERTO ELSEIF
Rule 87    ELSEIF -> elseif E BLOQUE_ABIERTO ELSE
Rule 88    ELSE -> else BLOQUE
Rule 89    WHILE -> while E BLOQUE
Rule 90    FOR -> for id in E BLOQUE
Rule 91    RANGO -> E dospuntos E
Rule 92    RANGO -> dospuntos
Rule 93    BREAK -> break
Rule 94    CONTINUE -> continue
Rule 95    RETURN -> return E
Rule 96    RETURN -> return

Terminals, with rules where they appear

Bool                 : 19
Char                 : 20
Float64              : 18
Int64                : 17
Nothing              : 73
String               : 21
and                  : 60
asterisco            : 48
barra                : 49
bool                 : 70
break                : 93
caret                : 50
char                 : 71
coma                 : 34 44
continue             : 94
corA                 : 30 78 79
corB                 : 30 78 79
diferenciacion       : 58
dospuntos            : 62 91 92
else                 : 88
elseif               : 85 86 87
end                  : 15 38 39
error                : 3 4
float64              : 69
for                  : 90
function             : 32 33
global               : 23
id                   : 25 26 29 31 32 33 36 37 38 39 42 43 80 81 90
if                   : 82 83 84
igual                : 24 25
igualacion           : 57
in                   : 90
int64                : 68
interrog             : 62
llaveA               : 77
llaveB               : 77
local                : 22
mas                  : 46
mayor                : 53
mayor_igual          : 55
menor                : 54
menor_igual          : 56
menos                : 47 52
modulo               : 51
mutable              : 39
not                  : 61
or                   : 59
parA                 : 32 33 64 80 81
parB                 : 32 33 64 80 81
punto                : 29
puntoycoma           : 1 2 3 4 42 43
return               : 95 96
string               : 76
struct               : 38 39
tipo                 : 28 37 42
while                : 89

Nonterminals, with rules where they appear

A                    : 40 41
ARREGLO              : 67
ASIGNACION           : 5
ASIGNACION_VALOR     : 24 25
ATR                  : 38 39 40
BLOQUE               : 32 33 82 85 88 89 90
BLOQUE_ABIERTO       : 83 84 86 87
BREAK                : 12
CONTINUE             : 13
E                    : 27 28 30 44 45 46 46 47 47 48 48 49 49 50 50 51 51 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 62 62 62 64 77 82 83 84 85 86 87 89 90 91 91 95
ELSE                 : 83 87
ELSEIF               : 84 86
EXP                  : 44 78 80
FOR                  : 11
FUNCION              : 6
I                    : 1 2
ID                   : 24 29 30 63
IF                   : 9
INS                  : 1 3 15 16 0
LLAMADA              : 8 65
P                    : 34 35
PAR                  : 32 34
RANGO                : 66
RETURN               : 14
S                    : 74 75
SCOPE                : 25 26
STRING               : 72 74
STRUCT               : 7
TIPO                 : 28 37 42
WHILE                : 10

Parsing method: LALR

state 0

    (0) S' -> . INS
    (1) INS -> . INS I puntoycoma
    (2) INS -> . I puntoycoma
    (3) INS -> . INS error puntoycoma
    (4) INS -> . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    error           shift and go to state 3
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    INS                            shift and go to state 1
    I                              shift and go to state 2
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 1

    (0) S' -> INS .
    (1) INS -> INS . I puntoycoma
    (3) INS -> INS . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    error           shift and go to state 29
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    I                              shift and go to state 28
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 2

    (2) INS -> I . puntoycoma

    puntoycoma      shift and go to state 30


state 3

    (4) INS -> error . puntoycoma

    puntoycoma      shift and go to state 31


state 4

    (5) I -> ASIGNACION .

    puntoycoma      reduce using rule 5 (I -> ASIGNACION .)


state 5

    (6) I -> FUNCION .

    puntoycoma      reduce using rule 6 (I -> FUNCION .)


state 6

    (7) I -> STRUCT .

    puntoycoma      reduce using rule 7 (I -> STRUCT .)


state 7

    (8) I -> LLAMADA .

    puntoycoma      reduce using rule 8 (I -> LLAMADA .)


state 8

    (9) I -> IF .

    puntoycoma      reduce using rule 9 (I -> IF .)


state 9

    (10) I -> WHILE .

    puntoycoma      reduce using rule 10 (I -> WHILE .)


state 10

    (11) I -> FOR .

    puntoycoma      reduce using rule 11 (I -> FOR .)


state 11

    (12) I -> BREAK .

    puntoycoma      reduce using rule 12 (I -> BREAK .)


state 12

    (13) I -> CONTINUE .

    puntoycoma      reduce using rule 13 (I -> CONTINUE .)


state 13

    (14) I -> RETURN .

    puntoycoma      reduce using rule 14 (I -> RETURN .)


state 14

    (24) ASIGNACION -> ID . igual ASIGNACION_VALOR
    (29) ID -> ID . punto id
    (30) ID -> ID . corA E corB

    igual           shift and go to state 32
    punto           shift and go to state 33
    corA            shift and go to state 34


state 15

    (25) ASIGNACION -> SCOPE . id igual ASIGNACION_VALOR
    (26) ASIGNACION -> SCOPE . id

    id              shift and go to state 35


state 16

    (80) LLAMADA -> id . parA EXP parB
    (81) LLAMADA -> id . parA parB
    (31) ID -> id .

    parA            shift and go to state 36
    igual           reduce using rule 31 (ID -> id .)
    punto           reduce using rule 31 (ID -> id .)
    corA            reduce using rule 31 (ID -> id .)


state 17

    (32) FUNCION -> function . id parA PAR parB BLOQUE
    (33) FUNCION -> function . id parA parB BLOQUE

    id              shift and go to state 37


state 18

    (38) STRUCT -> struct . id ATR end

    id              shift and go to state 38


state 19

    (39) STRUCT -> mutable . struct id ATR end

    struct          shift and go to state 39


state 20

    (82) IF -> if . E BLOQUE
    (83) IF -> if . E BLOQUE_ABIERTO ELSE
    (84) IF -> if . E BLOQUE_ABIERTO ELSEIF
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 40
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 21

    (89) WHILE -> while . E BLOQUE
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 60
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 22

    (90) FOR -> for . id in E BLOQUE

    id              shift and go to state 61


state 23

    (93) BREAK -> break .

    puntoycoma      reduce using rule 93 (BREAK -> break .)


state 24

    (94) CONTINUE -> continue .

    puntoycoma      reduce using rule 94 (CONTINUE -> continue .)


state 25

    (95) RETURN -> return . E
    (96) RETURN -> return .
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    puntoycoma      reduce using rule 96 (RETURN -> return .)
    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 62
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 26

    (22) SCOPE -> local .

    id              reduce using rule 22 (SCOPE -> local .)


state 27

    (23) SCOPE -> global .

    id              reduce using rule 23 (SCOPE -> global .)


state 28

    (1) INS -> INS I . puntoycoma

    puntoycoma      shift and go to state 63


state 29

    (3) INS -> INS error . puntoycoma

    puntoycoma      shift and go to state 64


state 30

    (2) INS -> I puntoycoma .

    error           reduce using rule 2 (INS -> I puntoycoma .)
    function        reduce using rule 2 (INS -> I puntoycoma .)
    struct          reduce using rule 2 (INS -> I puntoycoma .)
    mutable         reduce using rule 2 (INS -> I puntoycoma .)
    id              reduce using rule 2 (INS -> I puntoycoma .)
    if              reduce using rule 2 (INS -> I puntoycoma .)
    while           reduce using rule 2 (INS -> I puntoycoma .)
    for             reduce using rule 2 (INS -> I puntoycoma .)
    break           reduce using rule 2 (INS -> I puntoycoma .)
    continue        reduce using rule 2 (INS -> I puntoycoma .)
    return          reduce using rule 2 (INS -> I puntoycoma .)
    local           reduce using rule 2 (INS -> I puntoycoma .)
    global          reduce using rule 2 (INS -> I puntoycoma .)
    $end            reduce using rule 2 (INS -> I puntoycoma .)
    end             reduce using rule 2 (INS -> I puntoycoma .)
    else            reduce using rule 2 (INS -> I puntoycoma .)
    elseif          reduce using rule 2 (INS -> I puntoycoma .)


state 31

    (4) INS -> error puntoycoma .

    error           reduce using rule 4 (INS -> error puntoycoma .)
    function        reduce using rule 4 (INS -> error puntoycoma .)
    struct          reduce using rule 4 (INS -> error puntoycoma .)
    mutable         reduce using rule 4 (INS -> error puntoycoma .)
    id              reduce using rule 4 (INS -> error puntoycoma .)
    if              reduce using rule 4 (INS -> error puntoycoma .)
    while           reduce using rule 4 (INS -> error puntoycoma .)
    for             reduce using rule 4 (INS -> error puntoycoma .)
    break           reduce using rule 4 (INS -> error puntoycoma .)
    continue        reduce using rule 4 (INS -> error puntoycoma .)
    return          reduce using rule 4 (INS -> error puntoycoma .)
    local           reduce using rule 4 (INS -> error puntoycoma .)
    global          reduce using rule 4 (INS -> error puntoycoma .)
    $end            reduce using rule 4 (INS -> error puntoycoma .)
    end             reduce using rule 4 (INS -> error puntoycoma .)
    else            reduce using rule 4 (INS -> error puntoycoma .)
    elseif          reduce using rule 4 (INS -> error puntoycoma .)


state 32

    (24) ASIGNACION -> ID igual . ASIGNACION_VALOR
    (27) ASIGNACION_VALOR -> . E
    (28) ASIGNACION_VALOR -> . E tipo TIPO
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    ID                             shift and go to state 44
    ASIGNACION_VALOR               shift and go to state 65
    E                              shift and go to state 66
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 33

    (29) ID -> ID punto . id

    id              shift and go to state 67


state 34

    (30) ID -> ID corA . E corB
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    ID                             shift and go to state 44
    E                              shift and go to state 68
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 35

    (25) ASIGNACION -> SCOPE id . igual ASIGNACION_VALOR
    (26) ASIGNACION -> SCOPE id .

    igual           shift and go to state 69
    puntoycoma      reduce using rule 26 (ASIGNACION -> SCOPE id .)


state 36

    (80) LLAMADA -> id parA . EXP parB
    (81) LLAMADA -> id parA . parB
    (44) EXP -> . EXP coma E
    (45) EXP -> . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    parB            shift and go to state 71
    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    EXP                            shift and go to state 70
    E                              shift and go to state 72
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 37

    (32) FUNCION -> function id . parA PAR parB BLOQUE
    (33) FUNCION -> function id . parA parB BLOQUE

    parA            shift and go to state 73


state 38

    (38) STRUCT -> struct id . ATR end
    (40) ATR -> . ATR A
    (41) ATR -> . A
    (42) A -> . id tipo TIPO puntoycoma
    (43) A -> . id puntoycoma

    id              shift and go to state 74

    ATR                            shift and go to state 75
    A                              shift and go to state 76

state 39

    (39) STRUCT -> mutable struct . id ATR end

    id              shift and go to state 77


state 40

    (82) IF -> if E . BLOQUE
    (83) IF -> if E . BLOQUE_ABIERTO ELSE
    (84) IF -> if E . BLOQUE_ABIERTO ELSEIF
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E
    (15) BLOQUE -> . INS end
    (16) BLOQUE_ABIERTO -> . INS
    (1) INS -> . INS I puntoycoma
    (2) INS -> . I puntoycoma
    (3) INS -> . INS error puntoycoma
    (4) INS -> . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95
    error           shift and go to state 3
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    BLOQUE                         shift and go to state 78
    BLOQUE_ABIERTO                 shift and go to state 79
    INS                            shift and go to state 96
    I                              shift and go to state 2
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 41

    (52) E -> menos . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 97
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 42

    (61) E -> not . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 98
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 43

    (92) RANGO -> dospuntos .

    mas             reduce using rule 92 (RANGO -> dospuntos .)
    menos           reduce using rule 92 (RANGO -> dospuntos .)
    asterisco       reduce using rule 92 (RANGO -> dospuntos .)
    barra           reduce using rule 92 (RANGO -> dospuntos .)
    caret           reduce using rule 92 (RANGO -> dospuntos .)
    modulo          reduce using rule 92 (RANGO -> dospuntos .)
    mayor           reduce using rule 92 (RANGO -> dospuntos .)
    menor           reduce using rule 92 (RANGO -> dospuntos .)
    mayor_igual     reduce using rule 92 (RANGO -> dospuntos .)
    menor_igual     reduce using rule 92 (RANGO -> dospuntos .)
    igualacion      reduce using rule 92 (RANGO -> dospuntos .)
    diferenciacion  reduce using rule 92 (RANGO -> dospuntos .)
    or              reduce using rule 92 (RANGO -> dospuntos .)
    and             reduce using rule 92 (RANGO -> dospuntos .)
    interrog        reduce using rule 92 (RANGO -> dospuntos .)
    dospuntos       reduce using rule 92 (RANGO -> dospuntos .)
    error           reduce using rule 92 (RANGO -> dospuntos .)
    function        reduce using rule 92 (RANGO -> dospuntos .)
    struct          reduce using rule 92 (RANGO -> dospuntos .)
    mutable         reduce using rule 92 (RANGO -> dospuntos .)
    id              reduce using rule 92 (RANGO -> dospuntos .)
    if              reduce using rule 92 (RANGO -> dospuntos .)
    while           reduce using rule 92 (RANGO -> dospuntos .)
    for             reduce using rule 92 (RANGO -> dospuntos .)
    break           reduce using rule 92 (RANGO -> dospuntos .)
    continue        reduce using rule 92 (RANGO -> dospuntos .)
    return          reduce using rule 92 (RANGO -> dospuntos .)
    local           reduce using rule 92 (RANGO -> dospuntos .)
    global          reduce using rule 92 (RANGO -> dospuntos .)
    puntoycoma      reduce using rule 92 (RANGO -> dospuntos .)
    tipo            reduce using rule 92 (RANGO -> dospuntos .)
    corB            reduce using rule 92 (RANGO -> dospuntos .)
    parB            reduce using rule 92 (RANGO -> dospuntos .)
    coma            reduce using rule 92 (RANGO -> dospuntos .)
    llaveB          reduce using rule 92 (RANGO -> dospuntos .)


state 44

    (63) E -> ID .
    (29) ID -> ID . punto id
    (30) ID -> ID . corA E corB

    mas             reduce using rule 63 (E -> ID .)
    menos           reduce using rule 63 (E -> ID .)
    asterisco       reduce using rule 63 (E -> ID .)
    barra           reduce using rule 63 (E -> ID .)
    caret           reduce using rule 63 (E -> ID .)
    modulo          reduce using rule 63 (E -> ID .)
    mayor           reduce using rule 63 (E -> ID .)
    menor           reduce using rule 63 (E -> ID .)
    mayor_igual     reduce using rule 63 (E -> ID .)
    menor_igual     reduce using rule 63 (E -> ID .)
    igualacion      reduce using rule 63 (E -> ID .)
    diferenciacion  reduce using rule 63 (E -> ID .)
    or              reduce using rule 63 (E -> ID .)
    and             reduce using rule 63 (E -> ID .)
    interrog        reduce using rule 63 (E -> ID .)
    dospuntos       reduce using rule 63 (E -> ID .)
    error           reduce using rule 63 (E -> ID .)
    function        reduce using rule 63 (E -> ID .)
    struct          reduce using rule 63 (E -> ID .)
    mutable         reduce using rule 63 (E -> ID .)
    id              reduce using rule 63 (E -> ID .)
    if              reduce using rule 63 (E -> ID .)
    while           reduce using rule 63 (E -> ID .)
    for             reduce using rule 63 (E -> ID .)
    break           reduce using rule 63 (E -> ID .)
    continue        reduce using rule 63 (E -> ID .)
    return          reduce using rule 63 (E -> ID .)
    local           reduce using rule 63 (E -> ID .)
    global          reduce using rule 63 (E -> ID .)
    puntoycoma      reduce using rule 63 (E -> ID .)
    tipo            reduce using rule 63 (E -> ID .)
    corB            reduce using rule 63 (E -> ID .)
    parB            reduce using rule 63 (E -> ID .)
    coma            reduce using rule 63 (E -> ID .)
    llaveB          reduce using rule 63 (E -> ID .)
    punto           shift and go to state 33
    corA            shift and go to state 34


state 45

    (64) E -> parA . E parB
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 99
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 46

    (65) E -> LLAMADA .

    mas             reduce using rule 65 (E -> LLAMADA .)
    menos           reduce using rule 65 (E -> LLAMADA .)
    asterisco       reduce using rule 65 (E -> LLAMADA .)
    barra           reduce using rule 65 (E -> LLAMADA .)
    caret           reduce using rule 65 (E -> LLAMADA .)
    modulo          reduce using rule 65 (E -> LLAMADA .)
    mayor           reduce using rule 65 (E -> LLAMADA .)
    menor           reduce using rule 65 (E -> LLAMADA .)
    mayor_igual     reduce using rule 65 (E -> LLAMADA .)
    menor_igual     reduce using rule 65 (E -> LLAMADA .)
    igualacion      reduce using rule 65 (E -> LLAMADA .)
    diferenciacion  reduce using rule 65 (E -> LLAMADA .)
    or              reduce using rule 65 (E -> LLAMADA .)
    and             reduce using rule 65 (E -> LLAMADA .)
    interrog        reduce using rule 65 (E -> LLAMADA .)
    dospuntos       reduce using rule 65 (E -> LLAMADA .)
    error           reduce using rule 65 (E -> LLAMADA .)
    function        reduce using rule 65 (E -> LLAMADA .)
    struct          reduce using rule 65 (E -> LLAMADA .)
    mutable         reduce using rule 65 (E -> LLAMADA .)
    id              reduce using rule 65 (E -> LLAMADA .)
    if              reduce using rule 65 (E -> LLAMADA .)
    while           reduce using rule 65 (E -> LLAMADA .)
    for             reduce using rule 65 (E -> LLAMADA .)
    break           reduce using rule 65 (E -> LLAMADA .)
    continue        reduce using rule 65 (E -> LLAMADA .)
    return          reduce using rule 65 (E -> LLAMADA .)
    local           reduce using rule 65 (E -> LLAMADA .)
    global          reduce using rule 65 (E -> LLAMADA .)
    puntoycoma      reduce using rule 65 (E -> LLAMADA .)
    tipo            reduce using rule 65 (E -> LLAMADA .)
    corB            reduce using rule 65 (E -> LLAMADA .)
    parB            reduce using rule 65 (E -> LLAMADA .)
    coma            reduce using rule 65 (E -> LLAMADA .)
    llaveB          reduce using rule 65 (E -> LLAMADA .)


state 47

    (66) E -> RANGO .

    mas             reduce using rule 66 (E -> RANGO .)
    menos           reduce using rule 66 (E -> RANGO .)
    asterisco       reduce using rule 66 (E -> RANGO .)
    barra           reduce using rule 66 (E -> RANGO .)
    caret           reduce using rule 66 (E -> RANGO .)
    modulo          reduce using rule 66 (E -> RANGO .)
    mayor           reduce using rule 66 (E -> RANGO .)
    menor           reduce using rule 66 (E -> RANGO .)
    mayor_igual     reduce using rule 66 (E -> RANGO .)
    menor_igual     reduce using rule 66 (E -> RANGO .)
    igualacion      reduce using rule 66 (E -> RANGO .)
    diferenciacion  reduce using rule 66 (E -> RANGO .)
    or              reduce using rule 66 (E -> RANGO .)
    and             reduce using rule 66 (E -> RANGO .)
    interrog        reduce using rule 66 (E -> RANGO .)
    dospuntos       reduce using rule 66 (E -> RANGO .)
    error           reduce using rule 66 (E -> RANGO .)
    function        reduce using rule 66 (E -> RANGO .)
    struct          reduce using rule 66 (E -> RANGO .)
    mutable         reduce using rule 66 (E -> RANGO .)
    id              reduce using rule 66 (E -> RANGO .)
    if              reduce using rule 66 (E -> RANGO .)
    while           reduce using rule 66 (E -> RANGO .)
    for             reduce using rule 66 (E -> RANGO .)
    break           reduce using rule 66 (E -> RANGO .)
    continue        reduce using rule 66 (E -> RANGO .)
    return          reduce using rule 66 (E -> RANGO .)
    local           reduce using rule 66 (E -> RANGO .)
    global          reduce using rule 66 (E -> RANGO .)
    puntoycoma      reduce using rule 66 (E -> RANGO .)
    tipo            reduce using rule 66 (E -> RANGO .)
    corB            reduce using rule 66 (E -> RANGO .)
    parB            reduce using rule 66 (E -> RANGO .)
    coma            reduce using rule 66 (E -> RANGO .)
    llaveB          reduce using rule 66 (E -> RANGO .)


state 48

    (67) E -> ARREGLO .

    mas             reduce using rule 67 (E -> ARREGLO .)
    menos           reduce using rule 67 (E -> ARREGLO .)
    asterisco       reduce using rule 67 (E -> ARREGLO .)
    barra           reduce using rule 67 (E -> ARREGLO .)
    caret           reduce using rule 67 (E -> ARREGLO .)
    modulo          reduce using rule 67 (E -> ARREGLO .)
    mayor           reduce using rule 67 (E -> ARREGLO .)
    menor           reduce using rule 67 (E -> ARREGLO .)
    mayor_igual     reduce using rule 67 (E -> ARREGLO .)
    menor_igual     reduce using rule 67 (E -> ARREGLO .)
    igualacion      reduce using rule 67 (E -> ARREGLO .)
    diferenciacion  reduce using rule 67 (E -> ARREGLO .)
    or              reduce using rule 67 (E -> ARREGLO .)
    and             reduce using rule 67 (E -> ARREGLO .)
    interrog        reduce using rule 67 (E -> ARREGLO .)
    dospuntos       reduce using rule 67 (E -> ARREGLO .)
    error           reduce using rule 67 (E -> ARREGLO .)
    function        reduce using rule 67 (E -> ARREGLO .)
    struct          reduce using rule 67 (E -> ARREGLO .)
    mutable         reduce using rule 67 (E -> ARREGLO .)
    id              reduce using rule 67 (E -> ARREGLO .)
    if              reduce using rule 67 (E -> ARREGLO .)
    while           reduce using rule 67 (E -> ARREGLO .)
    for             reduce using rule 67 (E -> ARREGLO .)
    break           reduce using rule 67 (E -> ARREGLO .)
    continue        reduce using rule 67 (E -> ARREGLO .)
    return          reduce using rule 67 (E -> ARREGLO .)
    local           reduce using rule 67 (E -> ARREGLO .)
    global          reduce using rule 67 (E -> ARREGLO .)
    puntoycoma      reduce using rule 67 (E -> ARREGLO .)
    tipo            reduce using rule 67 (E -> ARREGLO .)
    corB            reduce using rule 67 (E -> ARREGLO .)
    parB            reduce using rule 67 (E -> ARREGLO .)
    coma            reduce using rule 67 (E -> ARREGLO .)
    llaveB          reduce using rule 67 (E -> ARREGLO .)


state 49

    (68) E -> int64 .

    mas             reduce using rule 68 (E -> int64 .)
    menos           reduce using rule 68 (E -> int64 .)
    asterisco       reduce using rule 68 (E -> int64 .)
    barra           reduce using rule 68 (E -> int64 .)
    caret           reduce using rule 68 (E -> int64 .)
    modulo          reduce using rule 68 (E -> int64 .)
    mayor           reduce using rule 68 (E -> int64 .)
    menor           reduce using rule 68 (E -> int64 .)
    mayor_igual     reduce using rule 68 (E -> int64 .)
    menor_igual     reduce using rule 68 (E -> int64 .)
    igualacion      reduce using rule 68 (E -> int64 .)
    diferenciacion  reduce using rule 68 (E -> int64 .)
    or              reduce using rule 68 (E -> int64 .)
    and             reduce using rule 68 (E -> int64 .)
    interrog        reduce using rule 68 (E -> int64 .)
    dospuntos       reduce using rule 68 (E -> int64 .)
    error           reduce using rule 68 (E -> int64 .)
    function        reduce using rule 68 (E -> int64 .)
    struct          reduce using rule 68 (E -> int64 .)
    mutable         reduce using rule 68 (E -> int64 .)
    id              reduce using rule 68 (E -> int64 .)
    if              reduce using rule 68 (E -> int64 .)
    while           reduce using rule 68 (E -> int64 .)
    for             reduce using rule 68 (E -> int64 .)
    break           reduce using rule 68 (E -> int64 .)
    continue        reduce using rule 68 (E -> int64 .)
    return          reduce using rule 68 (E -> int64 .)
    local           reduce using rule 68 (E -> int64 .)
    global          reduce using rule 68 (E -> int64 .)
    puntoycoma      reduce using rule 68 (E -> int64 .)
    tipo            reduce using rule 68 (E -> int64 .)
    corB            reduce using rule 68 (E -> int64 .)
    parB            reduce using rule 68 (E -> int64 .)
    coma            reduce using rule 68 (E -> int64 .)
    llaveB          reduce using rule 68 (E -> int64 .)


state 50

    (69) E -> float64 .

    mas             reduce using rule 69 (E -> float64 .)
    menos           reduce using rule 69 (E -> float64 .)
    asterisco       reduce using rule 69 (E -> float64 .)
    barra           reduce using rule 69 (E -> float64 .)
    caret           reduce using rule 69 (E -> float64 .)
    modulo          reduce using rule 69 (E -> float64 .)
    mayor           reduce using rule 69 (E -> float64 .)
    menor           reduce using rule 69 (E -> float64 .)
    mayor_igual     reduce using rule 69 (E -> float64 .)
    menor_igual     reduce using rule 69 (E -> float64 .)
    igualacion      reduce using rule 69 (E -> float64 .)
    diferenciacion  reduce using rule 69 (E -> float64 .)
    or              reduce using rule 69 (E -> float64 .)
    and             reduce using rule 69 (E -> float64 .)
    interrog        reduce using rule 69 (E -> float64 .)
    dospuntos       reduce using rule 69 (E -> float64 .)
    error           reduce using rule 69 (E -> float64 .)
    function        reduce using rule 69 (E -> float64 .)
    struct          reduce using rule 69 (E -> float64 .)
    mutable         reduce using rule 69 (E -> float64 .)
    id              reduce using rule 69 (E -> float64 .)
    if              reduce using rule 69 (E -> float64 .)
    while           reduce using rule 69 (E -> float64 .)
    for             reduce using rule 69 (E -> float64 .)
    break           reduce using rule 69 (E -> float64 .)
    continue        reduce using rule 69 (E -> float64 .)
    return          reduce using rule 69 (E -> float64 .)
    local           reduce using rule 69 (E -> float64 .)
    global          reduce using rule 69 (E -> float64 .)
    puntoycoma      reduce using rule 69 (E -> float64 .)
    tipo            reduce using rule 69 (E -> float64 .)
    corB            reduce using rule 69 (E -> float64 .)
    parB            reduce using rule 69 (E -> float64 .)
    coma            reduce using rule 69 (E -> float64 .)
    llaveB          reduce using rule 69 (E -> float64 .)


state 51

    (70) E -> bool .

    mas             reduce using rule 70 (E -> bool .)
    menos           reduce using rule 70 (E -> bool .)
    asterisco       reduce using rule 70 (E -> bool .)
    barra           reduce using rule 70 (E -> bool .)
    caret           reduce using rule 70 (E -> bool .)
    modulo          reduce using rule 70 (E -> bool .)
    mayor           reduce using rule 70 (E -> bool .)
    menor           reduce using rule 70 (E -> bool .)
    mayor_igual     reduce using rule 70 (E -> bool .)
    menor_igual     reduce using rule 70 (E -> bool .)
    igualacion      reduce using rule 70 (E -> bool .)
    diferenciacion  reduce using rule 70 (E -> bool .)
    or              reduce using rule 70 (E -> bool .)
    and             reduce using rule 70 (E -> bool .)
    interrog        reduce using rule 70 (E -> bool .)
    dospuntos       reduce using rule 70 (E -> bool .)
    error           reduce using rule 70 (E -> bool .)
    function        reduce using rule 70 (E -> bool .)
    struct          reduce using rule 70 (E -> bool .)
    mutable         reduce using rule 70 (E -> bool .)
    id              reduce using rule 70 (E -> bool .)
    if              reduce using rule 70 (E -> bool .)
    while           reduce using rule 70 (E -> bool .)
    for             reduce using rule 70 (E -> bool .)
    break           reduce using rule 70 (E -> bool .)
    continue        reduce using rule 70 (E -> bool .)
    return          reduce using rule 70 (E -> bool .)
    local           reduce using rule 70 (E -> bool .)
    global          reduce using rule 70 (E -> bool .)
    puntoycoma      reduce using rule 70 (E -> bool .)
    tipo            reduce using rule 70 (E -> bool .)
    corB            reduce using rule 70 (E -> bool .)
    parB            reduce using rule 70 (E -> bool .)
    coma            reduce using rule 70 (E -> bool .)
    llaveB          reduce using rule 70 (E -> bool .)


state 52

    (71) E -> char .

    mas             reduce using rule 71 (E -> char .)
    menos           reduce using rule 71 (E -> char .)
    asterisco       reduce using rule 71 (E -> char .)
    barra           reduce using rule 71 (E -> char .)
    caret           reduce using rule 71 (E -> char .)
    modulo          reduce using rule 71 (E -> char .)
    mayor           reduce using rule 71 (E -> char .)
    menor           reduce using rule 71 (E -> char .)
    mayor_igual     reduce using rule 71 (E -> char .)
    menor_igual     reduce using rule 71 (E -> char .)
    igualacion      reduce using rule 71 (E -> char .)
    diferenciacion  reduce using rule 71 (E -> char .)
    or              reduce using rule 71 (E -> char .)
    and             reduce using rule 71 (E -> char .)
    interrog        reduce using rule 71 (E -> char .)
    dospuntos       reduce using rule 71 (E -> char .)
    error           reduce using rule 71 (E -> char .)
    function        reduce using rule 71 (E -> char .)
    struct          reduce using rule 71 (E -> char .)
    mutable         reduce using rule 71 (E -> char .)
    id              reduce using rule 71 (E -> char .)
    if              reduce using rule 71 (E -> char .)
    while           reduce using rule 71 (E -> char .)
    for             reduce using rule 71 (E -> char .)
    break           reduce using rule 71 (E -> char .)
    continue        reduce using rule 71 (E -> char .)
    return          reduce using rule 71 (E -> char .)
    local           reduce using rule 71 (E -> char .)
    global          reduce using rule 71 (E -> char .)
    puntoycoma      reduce using rule 71 (E -> char .)
    tipo            reduce using rule 71 (E -> char .)
    corB            reduce using rule 71 (E -> char .)
    parB            reduce using rule 71 (E -> char .)
    coma            reduce using rule 71 (E -> char .)
    llaveB          reduce using rule 71 (E -> char .)


state 53

    (72) E -> STRING .
    (74) STRING -> STRING . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    mas             reduce using rule 72 (E -> STRING .)
    menos           reduce using rule 72 (E -> STRING .)
    asterisco       reduce using rule 72 (E -> STRING .)
    barra           reduce using rule 72 (E -> STRING .)
    caret           reduce using rule 72 (E -> STRING .)
    modulo          reduce using rule 72 (E -> STRING .)
    mayor           reduce using rule 72 (E -> STRING .)
    menor           reduce using rule 72 (E -> STRING .)
    mayor_igual     reduce using rule 72 (E -> STRING .)
    menor_igual     reduce using rule 72 (E -> STRING .)
    igualacion      reduce using rule 72 (E -> STRING .)
    diferenciacion  reduce using rule 72 (E -> STRING .)
    or              reduce using rule 72 (E -> STRING .)
    and             reduce using rule 72 (E -> STRING .)
    interrog        reduce using rule 72 (E -> STRING .)
    dospuntos       reduce using rule 72 (E -> STRING .)
    error           reduce using rule 72 (E -> STRING .)
    function        reduce using rule 72 (E -> STRING .)
    struct          reduce using rule 72 (E -> STRING .)
    mutable         reduce using rule 72 (E -> STRING .)
    id              reduce using rule 72 (E -> STRING .)
    if              reduce using rule 72 (E -> STRING .)
    while           reduce using rule 72 (E -> STRING .)
    for             reduce using rule 72 (E -> STRING .)
    break           reduce using rule 72 (E -> STRING .)
    continue        reduce using rule 72 (E -> STRING .)
    return          reduce using rule 72 (E -> STRING .)
    local           reduce using rule 72 (E -> STRING .)
    global          reduce using rule 72 (E -> STRING .)
    puntoycoma      reduce using rule 72 (E -> STRING .)
    tipo            reduce using rule 72 (E -> STRING .)
    corB            reduce using rule 72 (E -> STRING .)
    parB            reduce using rule 72 (E -> STRING .)
    coma            reduce using rule 72 (E -> STRING .)
    llaveB          reduce using rule 72 (E -> STRING .)
    string          shift and go to state 58
    llaveA          shift and go to state 59

    S                              shift and go to state 100

state 54

    (73) E -> Nothing .

    mas             reduce using rule 73 (E -> Nothing .)
    menos           reduce using rule 73 (E -> Nothing .)
    asterisco       reduce using rule 73 (E -> Nothing .)
    barra           reduce using rule 73 (E -> Nothing .)
    caret           reduce using rule 73 (E -> Nothing .)
    modulo          reduce using rule 73 (E -> Nothing .)
    mayor           reduce using rule 73 (E -> Nothing .)
    menor           reduce using rule 73 (E -> Nothing .)
    mayor_igual     reduce using rule 73 (E -> Nothing .)
    menor_igual     reduce using rule 73 (E -> Nothing .)
    igualacion      reduce using rule 73 (E -> Nothing .)
    diferenciacion  reduce using rule 73 (E -> Nothing .)
    or              reduce using rule 73 (E -> Nothing .)
    and             reduce using rule 73 (E -> Nothing .)
    interrog        reduce using rule 73 (E -> Nothing .)
    dospuntos       reduce using rule 73 (E -> Nothing .)
    error           reduce using rule 73 (E -> Nothing .)
    function        reduce using rule 73 (E -> Nothing .)
    struct          reduce using rule 73 (E -> Nothing .)
    mutable         reduce using rule 73 (E -> Nothing .)
    id              reduce using rule 73 (E -> Nothing .)
    if              reduce using rule 73 (E -> Nothing .)
    while           reduce using rule 73 (E -> Nothing .)
    for             reduce using rule 73 (E -> Nothing .)
    break           reduce using rule 73 (E -> Nothing .)
    continue        reduce using rule 73 (E -> Nothing .)
    return          reduce using rule 73 (E -> Nothing .)
    local           reduce using rule 73 (E -> Nothing .)
    global          reduce using rule 73 (E -> Nothing .)
    puntoycoma      reduce using rule 73 (E -> Nothing .)
    tipo            reduce using rule 73 (E -> Nothing .)
    corB            reduce using rule 73 (E -> Nothing .)
    parB            reduce using rule 73 (E -> Nothing .)
    coma            reduce using rule 73 (E -> Nothing .)
    llaveB          reduce using rule 73 (E -> Nothing .)


state 55

    (31) ID -> id .
    (80) LLAMADA -> id . parA EXP parB
    (81) LLAMADA -> id . parA parB

    punto           reduce using rule 31 (ID -> id .)
    corA            reduce using rule 31 (ID -> id .)
    mas             reduce using rule 31 (ID -> id .)
    menos           reduce using rule 31 (ID -> id .)
    asterisco       reduce using rule 31 (ID -> id .)
    barra           reduce using rule 31 (ID -> id .)
    caret           reduce using rule 31 (ID -> id .)
    modulo          reduce using rule 31 (ID -> id .)
    mayor           reduce using rule 31 (ID -> id .)
    menor           reduce using rule 31 (ID -> id .)
    mayor_igual     reduce using rule 31 (ID -> id .)
    menor_igual     reduce using rule 31 (ID -> id .)
    igualacion      reduce using rule 31 (ID -> id .)
    diferenciacion  reduce using rule 31 (ID -> id .)
    or              reduce using rule 31 (ID -> id .)
    and             reduce using rule 31 (ID -> id .)
    interrog        reduce using rule 31 (ID -> id .)
    dospuntos       reduce using rule 31 (ID -> id .)
    error           reduce using rule 31 (ID -> id .)
    function        reduce using rule 31 (ID -> id .)
    struct          reduce using rule 31 (ID -> id .)
    mutable         reduce using rule 31 (ID -> id .)
    id              reduce using rule 31 (ID -> id .)
    if              reduce using rule 31 (ID -> id .)
    while           reduce using rule 31 (ID -> id .)
    for             reduce using rule 31 (ID -> id .)
    break           reduce using rule 31 (ID -> id .)
    continue        reduce using rule 31 (ID -> id .)
    return          reduce using rule 31 (ID -> id .)
    local           reduce using rule 31 (ID -> id .)
    global          reduce using rule 31 (ID -> id .)
    puntoycoma      reduce using rule 31 (ID -> id .)
    tipo            reduce using rule 31 (ID -> id .)
    corB            reduce using rule 31 (ID -> id .)
    parB            reduce using rule 31 (ID -> id .)
    coma            reduce using rule 31 (ID -> id .)
    llaveB          reduce using rule 31 (ID -> id .)
    parA            shift and go to state 36


state 56

    (78) ARREGLO -> corA . EXP corB
    (79) ARREGLO -> corA . corB
    (44) EXP -> . EXP coma E
    (45) EXP -> . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    corB            shift and go to state 102
    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    EXP                            shift and go to state 101
    E                              shift and go to state 72
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 57

    (75) STRING -> S .

    string          reduce using rule 75 (STRING -> S .)
    llaveA          reduce using rule 75 (STRING -> S .)
    mas             reduce using rule 75 (STRING -> S .)
    menos           reduce using rule 75 (STRING -> S .)
    asterisco       reduce using rule 75 (STRING -> S .)
    barra           reduce using rule 75 (STRING -> S .)
    caret           reduce using rule 75 (STRING -> S .)
    modulo          reduce using rule 75 (STRING -> S .)
    mayor           reduce using rule 75 (STRING -> S .)
    menor           reduce using rule 75 (STRING -> S .)
    mayor_igual     reduce using rule 75 (STRING -> S .)
    menor_igual     reduce using rule 75 (STRING -> S .)
    igualacion      reduce using rule 75 (STRING -> S .)
    diferenciacion  reduce using rule 75 (STRING -> S .)
    or              reduce using rule 75 (STRING -> S .)
    and             reduce using rule 75 (STRING -> S .)
    interrog        reduce using rule 75 (STRING -> S .)
    dospuntos       reduce using rule 75 (STRING -> S .)
    error           reduce using rule 75 (STRING -> S .)
    function        reduce using rule 75 (STRING -> S .)
    struct          reduce using rule 75 (STRING -> S .)
    mutable         reduce using rule 75 (STRING -> S .)
    id              reduce using rule 75 (STRING -> S .)
    if              reduce using rule 75 (STRING -> S .)
    while           reduce using rule 75 (STRING -> S .)
    for             reduce using rule 75 (STRING -> S .)
    break           reduce using rule 75 (STRING -> S .)
    continue        reduce using rule 75 (STRING -> S .)
    return          reduce using rule 75 (STRING -> S .)
    local           reduce using rule 75 (STRING -> S .)
    global          reduce using rule 75 (STRING -> S .)
    puntoycoma      reduce using rule 75 (STRING -> S .)
    tipo            reduce using rule 75 (STRING -> S .)
    corB            reduce using rule 75 (STRING -> S .)
    parB            reduce using rule 75 (STRING -> S .)
    coma            reduce using rule 75 (STRING -> S .)
    llaveB          reduce using rule 75 (STRING -> S .)


state 58

    (76) S -> string .

    string          reduce using rule 76 (S -> string .)
    llaveA          reduce using rule 76 (S -> string .)
    mas             reduce using rule 76 (S -> string .)
    menos           reduce using rule 76 (S -> string .)
    asterisco       reduce using rule 76 (S -> string .)
    barra           reduce using rule 76 (S -> string .)
    caret           reduce using rule 76 (S -> string .)
    modulo          reduce using rule 76 (S -> string .)
    mayor           reduce using rule 76 (S -> string .)
    menor           reduce using rule 76 (S -> string .)
    mayor_igual     reduce using rule 76 (S -> string .)
    menor_igual     reduce using rule 76 (S -> string .)
    igualacion      reduce using rule 76 (S -> string .)
    diferenciacion  reduce using rule 76 (S -> string .)
    or              reduce using rule 76 (S -> string .)
    and             reduce using rule 76 (S -> string .)
    interrog        reduce using rule 76 (S -> string .)
    dospuntos       reduce using rule 76 (S -> string .)
    error           reduce using rule 76 (S -> string .)
    function        reduce using rule 76 (S -> string .)
    struct          reduce using rule 76 (S -> string .)
    mutable         reduce using rule 76 (S -> string .)
    id              reduce using rule 76 (S -> string .)
    if              reduce using rule 76 (S -> string .)
    while           reduce using rule 76 (S -> string .)
    for             reduce using rule 76 (S -> string .)
    break           reduce using rule 76 (S -> string .)
    continue        reduce using rule 76 (S -> string .)
    return          reduce using rule 76 (S -> string .)
    local           reduce using rule 76 (S -> string .)
    global          reduce using rule 76 (S -> string .)
    puntoycoma      reduce using rule 76 (S -> string .)
    tipo            reduce using rule 76 (S -> string .)
    corB            reduce using rule 76 (S -> string .)
    parB            reduce using rule 76 (S -> string .)
    coma            reduce using rule 76 (S -> string .)
    llaveB          reduce using rule 76 (S -> string .)


state 59

    (77) S -> llaveA . E llaveB
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 103
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 60

    (89) WHILE -> while E . BLOQUE
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E
    (15) BLOQUE -> . INS end
    (1) INS -> . INS I puntoycoma
    (2) INS -> . I puntoycoma
    (3) INS -> . INS error puntoycoma
    (4) INS -> . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95
    error           shift and go to state 3
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    BLOQUE                         shift and go to state 104
    INS                            shift and go to state 105
    I                              shift and go to state 2
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 61

    (90) FOR -> for id . in E BLOQUE

    in              shift and go to state 106


state 62

    (95) RETURN -> return E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    puntoycoma      reduce using rule 95 (RETURN -> return E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95


state 63

    (1) INS -> INS I puntoycoma .

    error           reduce using rule 1 (INS -> INS I puntoycoma .)
    function        reduce using rule 1 (INS -> INS I puntoycoma .)
    struct          reduce using rule 1 (INS -> INS I puntoycoma .)
    mutable         reduce using rule 1 (INS -> INS I puntoycoma .)
    id              reduce using rule 1 (INS -> INS I puntoycoma .)
    if              reduce using rule 1 (INS -> INS I puntoycoma .)
    while           reduce using rule 1 (INS -> INS I puntoycoma .)
    for             reduce using rule 1 (INS -> INS I puntoycoma .)
    break           reduce using rule 1 (INS -> INS I puntoycoma .)
    continue        reduce using rule 1 (INS -> INS I puntoycoma .)
    return          reduce using rule 1 (INS -> INS I puntoycoma .)
    local           reduce using rule 1 (INS -> INS I puntoycoma .)
    global          reduce using rule 1 (INS -> INS I puntoycoma .)
    $end            reduce using rule 1 (INS -> INS I puntoycoma .)
    end             reduce using rule 1 (INS -> INS I puntoycoma .)
    else            reduce using rule 1 (INS -> INS I puntoycoma .)
    elseif          reduce using rule 1 (INS -> INS I puntoycoma .)


state 64

    (3) INS -> INS error puntoycoma .

    error           reduce using rule 3 (INS -> INS error puntoycoma .)
    function        reduce using rule 3 (INS -> INS error puntoycoma .)
    struct          reduce using rule 3 (INS -> INS error puntoycoma .)
    mutable         reduce using rule 3 (INS -> INS error puntoycoma .)
    id              reduce using rule 3 (INS -> INS error puntoycoma .)
    if              reduce using rule 3 (INS -> INS error puntoycoma .)
    while           reduce using rule 3 (INS -> INS error puntoycoma .)
    for             reduce using rule 3 (INS -> INS error puntoycoma .)
    break           reduce using rule 3 (INS -> INS error puntoycoma .)
    continue        reduce using rule 3 (INS -> INS error puntoycoma .)
    return          reduce using rule 3 (INS -> INS error puntoycoma .)
    local           reduce using rule 3 (INS -> INS error puntoycoma .)
    global          reduce using rule 3 (INS -> INS error puntoycoma .)
    $end            reduce using rule 3 (INS -> INS error puntoycoma .)
    end             reduce using rule 3 (INS -> INS error puntoycoma .)
    else            reduce using rule 3 (INS -> INS error puntoycoma .)
    elseif          reduce using rule 3 (INS -> INS error puntoycoma .)


state 65

    (24) ASIGNACION -> ID igual ASIGNACION_VALOR .

    puntoycoma      reduce using rule 24 (ASIGNACION -> ID igual ASIGNACION_VALOR .)


state 66

    (27) ASIGNACION_VALOR -> E .
    (28) ASIGNACION_VALOR -> E . tipo TIPO
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    puntoycoma      reduce using rule 27 (ASIGNACION_VALOR -> E .)
    tipo            shift and go to state 107
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95


state 67

    (29) ID -> ID punto id .

    igual           reduce using rule 29 (ID -> ID punto id .)
    punto           reduce using rule 29 (ID -> ID punto id .)
    corA            reduce using rule 29 (ID -> ID punto id .)
    mas             reduce using rule 29 (ID -> ID punto id .)
    menos           reduce using rule 29 (ID -> ID punto id .)
    asterisco       reduce using rule 29 (ID -> ID punto id .)
    barra           reduce using rule 29 (ID -> ID punto id .)
    caret           reduce using rule 29 (ID -> ID punto id .)
    modulo          reduce using rule 29 (ID -> ID punto id .)
    mayor           reduce using rule 29 (ID -> ID punto id .)
    menor           reduce using rule 29 (ID -> ID punto id .)
    mayor_igual     reduce using rule 29 (ID -> ID punto id .)
    menor_igual     reduce using rule 29 (ID -> ID punto id .)
    igualacion      reduce using rule 29 (ID -> ID punto id .)
    diferenciacion  reduce using rule 29 (ID -> ID punto id .)
    or              reduce using rule 29 (ID -> ID punto id .)
    and             reduce using rule 29 (ID -> ID punto id .)
    interrog        reduce using rule 29 (ID -> ID punto id .)
    dospuntos       reduce using rule 29 (ID -> ID punto id .)
    error           reduce using rule 29 (ID -> ID punto id .)
    function        reduce using rule 29 (ID -> ID punto id .)
    struct          reduce using rule 29 (ID -> ID punto id .)
    mutable         reduce using rule 29 (ID -> ID punto id .)
    id              reduce using rule 29 (ID -> ID punto id .)
    if              reduce using rule 29 (ID -> ID punto id .)
    while           reduce using rule 29 (ID -> ID punto id .)
    for             reduce using rule 29 (ID -> ID punto id .)
    break           reduce using rule 29 (ID -> ID punto id .)
    continue        reduce using rule 29 (ID -> ID punto id .)
    return          reduce using rule 29 (ID -> ID punto id .)
    local           reduce using rule 29 (ID -> ID punto id .)
    global          reduce using rule 29 (ID -> ID punto id .)
    puntoycoma      reduce using rule 29 (ID -> ID punto id .)
    tipo            reduce using rule 29 (ID -> ID punto id .)
    corB            reduce using rule 29 (ID -> ID punto id .)
    parB            reduce using rule 29 (ID -> ID punto id .)
    coma            reduce using rule 29 (ID -> ID punto id .)
    llaveB          reduce using rule 29 (ID -> ID punto id .)


state 68

    (30) ID -> ID corA E . corB
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    corB            shift and go to state 108
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95


state 69

    (25) ASIGNACION -> SCOPE id igual . ASIGNACION_VALOR
    (27) ASIGNACION_VALOR -> . E
    (28) ASIGNACION_VALOR -> . E tipo TIPO
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    ASIGNACION_VALOR               shift and go to state 109
    E                              shift and go to state 66
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 70

    (80) LLAMADA -> id parA EXP . parB
    (44) EXP -> EXP . coma E

    parB            shift and go to state 110
    coma            shift and go to state 111


state 71

    (81) LLAMADA -> id parA parB .

    puntoycoma      reduce using rule 81 (LLAMADA -> id parA parB .)
    mas             reduce using rule 81 (LLAMADA -> id parA parB .)
    menos           reduce using rule 81 (LLAMADA -> id parA parB .)
    asterisco       reduce using rule 81 (LLAMADA -> id parA parB .)
    barra           reduce using rule 81 (LLAMADA -> id parA parB .)
    caret           reduce using rule 81 (LLAMADA -> id parA parB .)
    modulo          reduce using rule 81 (LLAMADA -> id parA parB .)
    mayor           reduce using rule 81 (LLAMADA -> id parA parB .)
    menor           reduce using rule 81 (LLAMADA -> id parA parB .)
    mayor_igual     reduce using rule 81 (LLAMADA -> id parA parB .)
    menor_igual     reduce using rule 81 (LLAMADA -> id parA parB .)
    igualacion      reduce using rule 81 (LLAMADA -> id parA parB .)
    diferenciacion  reduce using rule 81 (LLAMADA -> id parA parB .)
    or              reduce using rule 81 (LLAMADA -> id parA parB .)
    and             reduce using rule 81 (LLAMADA -> id parA parB .)
    interrog        reduce using rule 81 (LLAMADA -> id parA parB .)
    dospuntos       reduce using rule 81 (LLAMADA -> id parA parB .)
    error           reduce using rule 81 (LLAMADA -> id parA parB .)
    function        reduce using rule 81 (LLAMADA -> id parA parB .)
    struct          reduce using rule 81 (LLAMADA -> id parA parB .)
    mutable         reduce using rule 81 (LLAMADA -> id parA parB .)
    id              reduce using rule 81 (LLAMADA -> id parA parB .)
    if              reduce using rule 81 (LLAMADA -> id parA parB .)
    while           reduce using rule 81 (LLAMADA -> id parA parB .)
    for             reduce using rule 81 (LLAMADA -> id parA parB .)
    break           reduce using rule 81 (LLAMADA -> id parA parB .)
    continue        reduce using rule 81 (LLAMADA -> id parA parB .)
    return          reduce using rule 81 (LLAMADA -> id parA parB .)
    local           reduce using rule 81 (LLAMADA -> id parA parB .)
    global          reduce using rule 81 (LLAMADA -> id parA parB .)
    tipo            reduce using rule 81 (LLAMADA -> id parA parB .)
    corB            reduce using rule 81 (LLAMADA -> id parA parB .)
    parB            reduce using rule 81 (LLAMADA -> id parA parB .)
    coma            reduce using rule 81 (LLAMADA -> id parA parB .)
    llaveB          reduce using rule 81 (LLAMADA -> id parA parB .)


state 72

    (45) EXP -> E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    parB            reduce using rule 45 (EXP -> E .)
    coma            reduce using rule 45 (EXP -> E .)
    corB            reduce using rule 45 (EXP -> E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95


state 73

    (32) FUNCION -> function id parA . PAR parB BLOQUE
    (33) FUNCION -> function id parA . parB BLOQUE
    (34) PAR -> . PAR coma P
    (35) PAR -> . P
    (36) P -> . id
    (37) P -> . id tipo TIPO

    parB            shift and go to state 114
    id              shift and go to state 112

    PAR                            shift and go to state 113
    P                              shift and go to state 115

state 74

    (42) A -> id . tipo TIPO puntoycoma
    (43) A -> id . puntoycoma

    tipo            shift and go to state 116
    puntoycoma      shift and go to state 117


state 75

    (38) STRUCT -> struct id ATR . end
    (40) ATR -> ATR . A
    (42) A -> . id tipo TIPO puntoycoma
    (43) A -> . id puntoycoma

    end             shift and go to state 118
    id              shift and go to state 74

    A                              shift and go to state 119

state 76

    (41) ATR -> A .

    end             reduce using rule 41 (ATR -> A .)
    id              reduce using rule 41 (ATR -> A .)


state 77

    (39) STRUCT -> mutable struct id . ATR end
    (40) ATR -> . ATR A
    (41) ATR -> . A
    (42) A -> . id tipo TIPO puntoycoma
    (43) A -> . id puntoycoma

    id              shift and go to state 74

    ATR                            shift and go to state 120
    A                              shift and go to state 76

state 78

    (82) IF -> if E BLOQUE .

    puntoycoma      reduce using rule 82 (IF -> if E BLOQUE .)


state 79

    (83) IF -> if E BLOQUE_ABIERTO . ELSE
    (84) IF -> if E BLOQUE_ABIERTO . ELSEIF
    (88) ELSE -> . else BLOQUE
    (85) ELSEIF -> . elseif E BLOQUE
    (86) ELSEIF -> . elseif E BLOQUE_ABIERTO ELSEIF
    (87) ELSEIF -> . elseif E BLOQUE_ABIERTO ELSE

    else            shift and go to state 123
    elseif          shift and go to state 124

    ELSE                           shift and go to state 121
    ELSEIF                         shift and go to state 122

state 80

    (46) E -> E mas . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 125
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 81

    (47) E -> E menos . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 126
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 82

    (48) E -> E asterisco . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 127
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 83

    (49) E -> E barra . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 128
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 84

    (50) E -> E caret . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 129
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 85

    (51) E -> E modulo . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 130
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 86

    (53) E -> E mayor . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 131
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 87

    (54) E -> E menor . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 132
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 88

    (55) E -> E mayor_igual . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 133
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 89

    (56) E -> E menor_igual . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 134
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 90

    (57) E -> E igualacion . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 135
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 91

    (58) E -> E diferenciacion . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 136
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 92

    (59) E -> E or . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 137
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 93

    (60) E -> E and . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 138
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 94

    (62) E -> E interrog . E dospuntos E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 139
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 95

    (91) RANGO -> E dospuntos . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 140
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 96

    (15) BLOQUE -> INS . end
    (16) BLOQUE_ABIERTO -> INS .
    (1) INS -> INS . I puntoycoma
    (3) INS -> INS . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    end             shift and go to state 141
    else            reduce using rule 16 (BLOQUE_ABIERTO -> INS .)
    elseif          reduce using rule 16 (BLOQUE_ABIERTO -> INS .)
    error           shift and go to state 29
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    I                              shift and go to state 28
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 97

    (52) E -> menos E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mas             reduce using rule 52 (E -> menos E .)
    menos           reduce using rule 52 (E -> menos E .)
    asterisco       reduce using rule 52 (E -> menos E .)
    barra           reduce using rule 52 (E -> menos E .)
    caret           reduce using rule 52 (E -> menos E .)
    modulo          reduce using rule 52 (E -> menos E .)
    mayor           reduce using rule 52 (E -> menos E .)
    menor           reduce using rule 52 (E -> menos E .)
    mayor_igual     reduce using rule 52 (E -> menos E .)
    menor_igual     reduce using rule 52 (E -> menos E .)
    igualacion      reduce using rule 52 (E -> menos E .)
    diferenciacion  reduce using rule 52 (E -> menos E .)
    or              reduce using rule 52 (E -> menos E .)
    and             reduce using rule 52 (E -> menos E .)
    interrog        reduce using rule 52 (E -> menos E .)
    dospuntos       reduce using rule 52 (E -> menos E .)
    error           reduce using rule 52 (E -> menos E .)
    function        reduce using rule 52 (E -> menos E .)
    struct          reduce using rule 52 (E -> menos E .)
    mutable         reduce using rule 52 (E -> menos E .)
    id              reduce using rule 52 (E -> menos E .)
    if              reduce using rule 52 (E -> menos E .)
    while           reduce using rule 52 (E -> menos E .)
    for             reduce using rule 52 (E -> menos E .)
    break           reduce using rule 52 (E -> menos E .)
    continue        reduce using rule 52 (E -> menos E .)
    return          reduce using rule 52 (E -> menos E .)
    local           reduce using rule 52 (E -> menos E .)
    global          reduce using rule 52 (E -> menos E .)
    puntoycoma      reduce using rule 52 (E -> menos E .)
    tipo            reduce using rule 52 (E -> menos E .)
    corB            reduce using rule 52 (E -> menos E .)
    parB            reduce using rule 52 (E -> menos E .)
    coma            reduce using rule 52 (E -> menos E .)
    llaveB          reduce using rule 52 (E -> menos E .)

  ! mas             [ shift and go to state 80 ]
  ! menos           [ shift and go to state 81 ]
  ! asterisco       [ shift and go to state 82 ]
  ! barra           [ shift and go to state 83 ]
  ! caret           [ shift and go to state 84 ]
  ! modulo          [ shift and go to state 85 ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 98

    (61) E -> not E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mas             reduce using rule 61 (E -> not E .)
    menos           reduce using rule 61 (E -> not E .)
    asterisco       reduce using rule 61 (E -> not E .)
    barra           reduce using rule 61 (E -> not E .)
    caret           reduce using rule 61 (E -> not E .)
    modulo          reduce using rule 61 (E -> not E .)
    mayor           reduce using rule 61 (E -> not E .)
    menor           reduce using rule 61 (E -> not E .)
    mayor_igual     reduce using rule 61 (E -> not E .)
    menor_igual     reduce using rule 61 (E -> not E .)
    igualacion      reduce using rule 61 (E -> not E .)
    diferenciacion  reduce using rule 61 (E -> not E .)
    or              reduce using rule 61 (E -> not E .)
    and             reduce using rule 61 (E -> not E .)
    interrog        reduce using rule 61 (E -> not E .)
    dospuntos       reduce using rule 61 (E -> not E .)
    error           reduce using rule 61 (E -> not E .)
    function        reduce using rule 61 (E -> not E .)
    struct          reduce using rule 61 (E -> not E .)
    mutable         reduce using rule 61 (E -> not E .)
    id              reduce using rule 61 (E -> not E .)
    if              reduce using rule 61 (E -> not E .)
    while           reduce using rule 61 (E -> not E .)
    for             reduce using rule 61 (E -> not E .)
    break           reduce using rule 61 (E -> not E .)
    continue        reduce using rule 61 (E -> not E .)
    return          reduce using rule 61 (E -> not E .)
    local           reduce using rule 61 (E -> not E .)
    global          reduce using rule 61 (E -> not E .)
    puntoycoma      reduce using rule 61 (E -> not E .)
    tipo            reduce using rule 61 (E -> not E .)
    corB            reduce using rule 61 (E -> not E .)
    parB            reduce using rule 61 (E -> not E .)
    coma            reduce using rule 61 (E -> not E .)
    llaveB          reduce using rule 61 (E -> not E .)

  ! mas             [ shift and go to state 80 ]
  ! menos           [ shift and go to state 81 ]
  ! asterisco       [ shift and go to state 82 ]
  ! barra           [ shift and go to state 83 ]
  ! caret           [ shift and go to state 84 ]
  ! modulo          [ shift and go to state 85 ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 99

    (64) E -> parA E . parB
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    parB            shift and go to state 142
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95


state 100

    (74) STRING -> STRING S .

    string          reduce using rule 74 (STRING -> STRING S .)
    llaveA          reduce using rule 74 (STRING -> STRING S .)
    mas             reduce using rule 74 (STRING -> STRING S .)
    menos           reduce using rule 74 (STRING -> STRING S .)
    asterisco       reduce using rule 74 (STRING -> STRING S .)
    barra           reduce using rule 74 (STRING -> STRING S .)
    caret           reduce using rule 74 (STRING -> STRING S .)
    modulo          reduce using rule 74 (STRING -> STRING S .)
    mayor           reduce using rule 74 (STRING -> STRING S .)
    menor           reduce using rule 74 (STRING -> STRING S .)
    mayor_igual     reduce using rule 74 (STRING -> STRING S .)
    menor_igual     reduce using rule 74 (STRING -> STRING S .)
    igualacion      reduce using rule 74 (STRING -> STRING S .)
    diferenciacion  reduce using rule 74 (STRING -> STRING S .)
    or              reduce using rule 74 (STRING -> STRING S .)
    and             reduce using rule 74 (STRING -> STRING S .)
    interrog        reduce using rule 74 (STRING -> STRING S .)
    dospuntos       reduce using rule 74 (STRING -> STRING S .)
    error           reduce using rule 74 (STRING -> STRING S .)
    function        reduce using rule 74 (STRING -> STRING S .)
    struct          reduce using rule 74 (STRING -> STRING S .)
    mutable         reduce using rule 74 (STRING -> STRING S .)
    id              reduce using rule 74 (STRING -> STRING S .)
    if              reduce using rule 74 (STRING -> STRING S .)
    while           reduce using rule 74 (STRING -> STRING S .)
    for             reduce using rule 74 (STRING -> STRING S .)
    break           reduce using rule 74 (STRING -> STRING S .)
    continue        reduce using rule 74 (STRING -> STRING S .)
    return          reduce using rule 74 (STRING -> STRING S .)
    local           reduce using rule 74 (STRING -> STRING S .)
    global          reduce using rule 74 (STRING -> STRING S .)
    puntoycoma      reduce using rule 74 (STRING -> STRING S .)
    tipo            reduce using rule 74 (STRING -> STRING S .)
    corB            reduce using rule 74 (STRING -> STRING S .)
    parB            reduce using rule 74 (STRING -> STRING S .)
    coma            reduce using rule 74 (STRING -> STRING S .)
    llaveB          reduce using rule 74 (STRING -> STRING S .)


state 101

    (78) ARREGLO -> corA EXP . corB
    (44) EXP -> EXP . coma E

    corB            shift and go to state 143
    coma            shift and go to state 111


state 102

    (79) ARREGLO -> corA corB .

    mas             reduce using rule 79 (ARREGLO -> corA corB .)
    menos           reduce using rule 79 (ARREGLO -> corA corB .)
    asterisco       reduce using rule 79 (ARREGLO -> corA corB .)
    barra           reduce using rule 79 (ARREGLO -> corA corB .)
    caret           reduce using rule 79 (ARREGLO -> corA corB .)
    modulo          reduce using rule 79 (ARREGLO -> corA corB .)
    mayor           reduce using rule 79 (ARREGLO -> corA corB .)
    menor           reduce using rule 79 (ARREGLO -> corA corB .)
    mayor_igual     reduce using rule 79 (ARREGLO -> corA corB .)
    menor_igual     reduce using rule 79 (ARREGLO -> corA corB .)
    igualacion      reduce using rule 79 (ARREGLO -> corA corB .)
    diferenciacion  reduce using rule 79 (ARREGLO -> corA corB .)
    or              reduce using rule 79 (ARREGLO -> corA corB .)
    and             reduce using rule 79 (ARREGLO -> corA corB .)
    interrog        reduce using rule 79 (ARREGLO -> corA corB .)
    dospuntos       reduce using rule 79 (ARREGLO -> corA corB .)
    error           reduce using rule 79 (ARREGLO -> corA corB .)
    function        reduce using rule 79 (ARREGLO -> corA corB .)
    struct          reduce using rule 79 (ARREGLO -> corA corB .)
    mutable         reduce using rule 79 (ARREGLO -> corA corB .)
    id              reduce using rule 79 (ARREGLO -> corA corB .)
    if              reduce using rule 79 (ARREGLO -> corA corB .)
    while           reduce using rule 79 (ARREGLO -> corA corB .)
    for             reduce using rule 79 (ARREGLO -> corA corB .)
    break           reduce using rule 79 (ARREGLO -> corA corB .)
    continue        reduce using rule 79 (ARREGLO -> corA corB .)
    return          reduce using rule 79 (ARREGLO -> corA corB .)
    local           reduce using rule 79 (ARREGLO -> corA corB .)
    global          reduce using rule 79 (ARREGLO -> corA corB .)
    puntoycoma      reduce using rule 79 (ARREGLO -> corA corB .)
    tipo            reduce using rule 79 (ARREGLO -> corA corB .)
    corB            reduce using rule 79 (ARREGLO -> corA corB .)
    parB            reduce using rule 79 (ARREGLO -> corA corB .)
    coma            reduce using rule 79 (ARREGLO -> corA corB .)
    llaveB          reduce using rule 79 (ARREGLO -> corA corB .)


state 103

    (77) S -> llaveA E . llaveB
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    llaveB          shift and go to state 144
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95


state 104

    (89) WHILE -> while E BLOQUE .

    puntoycoma      reduce using rule 89 (WHILE -> while E BLOQUE .)


state 105

    (15) BLOQUE -> INS . end
    (1) INS -> INS . I puntoycoma
    (3) INS -> INS . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    end             shift and go to state 141
    error           shift and go to state 29
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    I                              shift and go to state 28
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 106

    (90) FOR -> for id in . E BLOQUE
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 145
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 107

    (28) ASIGNACION_VALOR -> E tipo . TIPO
    (17) TIPO -> . Int64
    (18) TIPO -> . Float64
    (19) TIPO -> . Bool
    (20) TIPO -> . Char
    (21) TIPO -> . String

    Int64           shift and go to state 147
    Float64         shift and go to state 148
    Bool            shift and go to state 149
    Char            shift and go to state 150
    String          shift and go to state 151

    TIPO                           shift and go to state 146

state 108

    (30) ID -> ID corA E corB .

    igual           reduce using rule 30 (ID -> ID corA E corB .)
    punto           reduce using rule 30 (ID -> ID corA E corB .)
    corA            reduce using rule 30 (ID -> ID corA E corB .)
    mas             reduce using rule 30 (ID -> ID corA E corB .)
    menos           reduce using rule 30 (ID -> ID corA E corB .)
    asterisco       reduce using rule 30 (ID -> ID corA E corB .)
    barra           reduce using rule 30 (ID -> ID corA E corB .)
    caret           reduce using rule 30 (ID -> ID corA E corB .)
    modulo          reduce using rule 30 (ID -> ID corA E corB .)
    mayor           reduce using rule 30 (ID -> ID corA E corB .)
    menor           reduce using rule 30 (ID -> ID corA E corB .)
    mayor_igual     reduce using rule 30 (ID -> ID corA E corB .)
    menor_igual     reduce using rule 30 (ID -> ID corA E corB .)
    igualacion      reduce using rule 30 (ID -> ID corA E corB .)
    diferenciacion  reduce using rule 30 (ID -> ID corA E corB .)
    or              reduce using rule 30 (ID -> ID corA E corB .)
    and             reduce using rule 30 (ID -> ID corA E corB .)
    interrog        reduce using rule 30 (ID -> ID corA E corB .)
    dospuntos       reduce using rule 30 (ID -> ID corA E corB .)
    error           reduce using rule 30 (ID -> ID corA E corB .)
    function        reduce using rule 30 (ID -> ID corA E corB .)
    struct          reduce using rule 30 (ID -> ID corA E corB .)
    mutable         reduce using rule 30 (ID -> ID corA E corB .)
    id              reduce using rule 30 (ID -> ID corA E corB .)
    if              reduce using rule 30 (ID -> ID corA E corB .)
    while           reduce using rule 30 (ID -> ID corA E corB .)
    for             reduce using rule 30 (ID -> ID corA E corB .)
    break           reduce using rule 30 (ID -> ID corA E corB .)
    continue        reduce using rule 30 (ID -> ID corA E corB .)
    return          reduce using rule 30 (ID -> ID corA E corB .)
    local           reduce using rule 30 (ID -> ID corA E corB .)
    global          reduce using rule 30 (ID -> ID corA E corB .)
    puntoycoma      reduce using rule 30 (ID -> ID corA E corB .)
    tipo            reduce using rule 30 (ID -> ID corA E corB .)
    corB            reduce using rule 30 (ID -> ID corA E corB .)
    parB            reduce using rule 30 (ID -> ID corA E corB .)
    coma            reduce using rule 30 (ID -> ID corA E corB .)
    llaveB          reduce using rule 30 (ID -> ID corA E corB .)


state 109

    (25) ASIGNACION -> SCOPE id igual ASIGNACION_VALOR .

    puntoycoma      reduce using rule 25 (ASIGNACION -> SCOPE id igual ASIGNACION_VALOR .)


state 110

    (80) LLAMADA -> id parA EXP parB .

    puntoycoma      reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    mas             reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    menos           reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    asterisco       reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    barra           reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    caret           reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    modulo          reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    mayor           reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    menor           reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    mayor_igual     reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    menor_igual     reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    igualacion      reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    diferenciacion  reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    or              reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    and             reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    interrog        reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    dospuntos       reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    error           reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    function        reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    struct          reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    mutable         reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    id              reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    if              reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    while           reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    for             reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    break           reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    continue        reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    return          reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    local           reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    global          reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    tipo            reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    corB            reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    parB            reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    coma            reduce using rule 80 (LLAMADA -> id parA EXP parB .)
    llaveB          reduce using rule 80 (LLAMADA -> id parA EXP parB .)


state 111

    (44) EXP -> EXP coma . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 152
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 112

    (36) P -> id .
    (37) P -> id . tipo TIPO

    parB            reduce using rule 36 (P -> id .)
    coma            reduce using rule 36 (P -> id .)
    tipo            shift and go to state 153


state 113

    (32) FUNCION -> function id parA PAR . parB BLOQUE
    (34) PAR -> PAR . coma P

    parB            shift and go to state 154
    coma            shift and go to state 155


state 114

    (33) FUNCION -> function id parA parB . BLOQUE
    (15) BLOQUE -> . INS end
    (1) INS -> . INS I puntoycoma
    (2) INS -> . I puntoycoma
    (3) INS -> . INS error puntoycoma
    (4) INS -> . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    error           shift and go to state 3
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    BLOQUE                         shift and go to state 156
    INS                            shift and go to state 105
    I                              shift and go to state 2
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 115

    (35) PAR -> P .

    parB            reduce using rule 35 (PAR -> P .)
    coma            reduce using rule 35 (PAR -> P .)


state 116

    (42) A -> id tipo . TIPO puntoycoma
    (17) TIPO -> . Int64
    (18) TIPO -> . Float64
    (19) TIPO -> . Bool
    (20) TIPO -> . Char
    (21) TIPO -> . String

    Int64           shift and go to state 147
    Float64         shift and go to state 148
    Bool            shift and go to state 149
    Char            shift and go to state 150
    String          shift and go to state 151

    TIPO                           shift and go to state 157

state 117

    (43) A -> id puntoycoma .

    end             reduce using rule 43 (A -> id puntoycoma .)
    id              reduce using rule 43 (A -> id puntoycoma .)


state 118

    (38) STRUCT -> struct id ATR end .

    puntoycoma      reduce using rule 38 (STRUCT -> struct id ATR end .)


state 119

    (40) ATR -> ATR A .

    end             reduce using rule 40 (ATR -> ATR A .)
    id              reduce using rule 40 (ATR -> ATR A .)


state 120

    (39) STRUCT -> mutable struct id ATR . end
    (40) ATR -> ATR . A
    (42) A -> . id tipo TIPO puntoycoma
    (43) A -> . id puntoycoma

    end             shift and go to state 158
    id              shift and go to state 74

    A                              shift and go to state 119

state 121

    (83) IF -> if E BLOQUE_ABIERTO ELSE .

    puntoycoma      reduce using rule 83 (IF -> if E BLOQUE_ABIERTO ELSE .)


state 122

    (84) IF -> if E BLOQUE_ABIERTO ELSEIF .

    puntoycoma      reduce using rule 84 (IF -> if E BLOQUE_ABIERTO ELSEIF .)


state 123

    (88) ELSE -> else . BLOQUE
    (15) BLOQUE -> . INS end
    (1) INS -> . INS I puntoycoma
    (2) INS -> . I puntoycoma
    (3) INS -> . INS error puntoycoma
    (4) INS -> . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    error           shift and go to state 3
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    BLOQUE                         shift and go to state 159
    INS                            shift and go to state 105
    I                              shift and go to state 2
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 124

    (85) ELSEIF -> elseif . E BLOQUE
    (86) ELSEIF -> elseif . E BLOQUE_ABIERTO ELSEIF
    (87) ELSEIF -> elseif . E BLOQUE_ABIERTO ELSE
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 160
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 125

    (46) E -> E mas E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mas             reduce using rule 46 (E -> E mas E .)
    menos           reduce using rule 46 (E -> E mas E .)
    mayor           reduce using rule 46 (E -> E mas E .)
    menor           reduce using rule 46 (E -> E mas E .)
    mayor_igual     reduce using rule 46 (E -> E mas E .)
    menor_igual     reduce using rule 46 (E -> E mas E .)
    igualacion      reduce using rule 46 (E -> E mas E .)
    diferenciacion  reduce using rule 46 (E -> E mas E .)
    or              reduce using rule 46 (E -> E mas E .)
    and             reduce using rule 46 (E -> E mas E .)
    interrog        reduce using rule 46 (E -> E mas E .)
    dospuntos       reduce using rule 46 (E -> E mas E .)
    error           reduce using rule 46 (E -> E mas E .)
    function        reduce using rule 46 (E -> E mas E .)
    struct          reduce using rule 46 (E -> E mas E .)
    mutable         reduce using rule 46 (E -> E mas E .)
    id              reduce using rule 46 (E -> E mas E .)
    if              reduce using rule 46 (E -> E mas E .)
    while           reduce using rule 46 (E -> E mas E .)
    for             reduce using rule 46 (E -> E mas E .)
    break           reduce using rule 46 (E -> E mas E .)
    continue        reduce using rule 46 (E -> E mas E .)
    return          reduce using rule 46 (E -> E mas E .)
    local           reduce using rule 46 (E -> E mas E .)
    global          reduce using rule 46 (E -> E mas E .)
    puntoycoma      reduce using rule 46 (E -> E mas E .)
    tipo            reduce using rule 46 (E -> E mas E .)
    corB            reduce using rule 46 (E -> E mas E .)
    parB            reduce using rule 46 (E -> E mas E .)
    coma            reduce using rule 46 (E -> E mas E .)
    llaveB          reduce using rule 46 (E -> E mas E .)
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85

  ! asterisco       [ reduce using rule 46 (E -> E mas E .) ]
  ! barra           [ reduce using rule 46 (E -> E mas E .) ]
  ! caret           [ reduce using rule 46 (E -> E mas E .) ]
  ! modulo          [ reduce using rule 46 (E -> E mas E .) ]
  ! mas             [ shift and go to state 80 ]
  ! menos           [ shift and go to state 81 ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 126

    (47) E -> E menos E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mas             reduce using rule 47 (E -> E menos E .)
    menos           reduce using rule 47 (E -> E menos E .)
    mayor           reduce using rule 47 (E -> E menos E .)
    menor           reduce using rule 47 (E -> E menos E .)
    mayor_igual     reduce using rule 47 (E -> E menos E .)
    menor_igual     reduce using rule 47 (E -> E menos E .)
    igualacion      reduce using rule 47 (E -> E menos E .)
    diferenciacion  reduce using rule 47 (E -> E menos E .)
    or              reduce using rule 47 (E -> E menos E .)
    and             reduce using rule 47 (E -> E menos E .)
    interrog        reduce using rule 47 (E -> E menos E .)
    dospuntos       reduce using rule 47 (E -> E menos E .)
    error           reduce using rule 47 (E -> E menos E .)
    function        reduce using rule 47 (E -> E menos E .)
    struct          reduce using rule 47 (E -> E menos E .)
    mutable         reduce using rule 47 (E -> E menos E .)
    id              reduce using rule 47 (E -> E menos E .)
    if              reduce using rule 47 (E -> E menos E .)
    while           reduce using rule 47 (E -> E menos E .)
    for             reduce using rule 47 (E -> E menos E .)
    break           reduce using rule 47 (E -> E menos E .)
    continue        reduce using rule 47 (E -> E menos E .)
    return          reduce using rule 47 (E -> E menos E .)
    local           reduce using rule 47 (E -> E menos E .)
    global          reduce using rule 47 (E -> E menos E .)
    puntoycoma      reduce using rule 47 (E -> E menos E .)
    tipo            reduce using rule 47 (E -> E menos E .)
    corB            reduce using rule 47 (E -> E menos E .)
    parB            reduce using rule 47 (E -> E menos E .)
    coma            reduce using rule 47 (E -> E menos E .)
    llaveB          reduce using rule 47 (E -> E menos E .)
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85

  ! asterisco       [ reduce using rule 47 (E -> E menos E .) ]
  ! barra           [ reduce using rule 47 (E -> E menos E .) ]
  ! caret           [ reduce using rule 47 (E -> E menos E .) ]
  ! modulo          [ reduce using rule 47 (E -> E menos E .) ]
  ! mas             [ shift and go to state 80 ]
  ! menos           [ shift and go to state 81 ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 127

    (48) E -> E asterisco E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mas             reduce using rule 48 (E -> E asterisco E .)
    menos           reduce using rule 48 (E -> E asterisco E .)
    asterisco       reduce using rule 48 (E -> E asterisco E .)
    barra           reduce using rule 48 (E -> E asterisco E .)
    modulo          reduce using rule 48 (E -> E asterisco E .)
    mayor           reduce using rule 48 (E -> E asterisco E .)
    menor           reduce using rule 48 (E -> E asterisco E .)
    mayor_igual     reduce using rule 48 (E -> E asterisco E .)
    menor_igual     reduce using rule 48 (E -> E asterisco E .)
    igualacion      reduce using rule 48 (E -> E asterisco E .)
    diferenciacion  reduce using rule 48 (E -> E asterisco E .)
    or              reduce using rule 48 (E -> E asterisco E .)
    and             reduce using rule 48 (E -> E asterisco E .)
    interrog        reduce using rule 48 (E -> E asterisco E .)
    dospuntos       reduce using rule 48 (E -> E asterisco E .)
    error           reduce using rule 48 (E -> E asterisco E .)
    function        reduce using rule 48 (E -> E asterisco E .)
    struct          reduce using rule 48 (E -> E asterisco E .)
    mutable         reduce using rule 48 (E -> E asterisco E .)
    id              reduce using rule 48 (E -> E asterisco E .)
    if              reduce using rule 48 (E -> E asterisco E .)
    while           reduce using rule 48 (E -> E asterisco E .)
    for             reduce using rule 48 (E -> E asterisco E .)
    break           reduce using rule 48 (E -> E asterisco E .)
    continue        reduce using rule 48 (E -> E asterisco E .)
    return          reduce using rule 48 (E -> E asterisco E .)
    local           reduce using rule 48 (E -> E asterisco E .)
    global          reduce using rule 48 (E -> E asterisco E .)
    puntoycoma      reduce using rule 48 (E -> E asterisco E .)
    tipo            reduce using rule 48 (E -> E asterisco E .)
    corB            reduce using rule 48 (E -> E asterisco E .)
    parB            reduce using rule 48 (E -> E asterisco E .)
    coma            reduce using rule 48 (E -> E asterisco E .)
    llaveB          reduce using rule 48 (E -> E asterisco E .)
    caret           shift and go to state 84

  ! caret           [ reduce using rule 48 (E -> E asterisco E .) ]
  ! mas             [ shift and go to state 80 ]
  ! menos           [ shift and go to state 81 ]
  ! asterisco       [ shift and go to state 82 ]
  ! barra           [ shift and go to state 83 ]
  ! modulo          [ shift and go to state 85 ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 128

    (49) E -> E barra E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mas             reduce using rule 49 (E -> E barra E .)
    menos           reduce using rule 49 (E -> E barra E .)
    asterisco       reduce using rule 49 (E -> E barra E .)
    barra           reduce using rule 49 (E -> E barra E .)
    modulo          reduce using rule 49 (E -> E barra E .)
    mayor           reduce using rule 49 (E -> E barra E .)
    menor           reduce using rule 49 (E -> E barra E .)
    mayor_igual     reduce using rule 49 (E -> E barra E .)
    menor_igual     reduce using rule 49 (E -> E barra E .)
    igualacion      reduce using rule 49 (E -> E barra E .)
    diferenciacion  reduce using rule 49 (E -> E barra E .)
    or              reduce using rule 49 (E -> E barra E .)
    and             reduce using rule 49 (E -> E barra E .)
    interrog        reduce using rule 49 (E -> E barra E .)
    dospuntos       reduce using rule 49 (E -> E barra E .)
    error           reduce using rule 49 (E -> E barra E .)
    function        reduce using rule 49 (E -> E barra E .)
    struct          reduce using rule 49 (E -> E barra E .)
    mutable         reduce using rule 49 (E -> E barra E .)
    id              reduce using rule 49 (E -> E barra E .)
    if              reduce using rule 49 (E -> E barra E .)
    while           reduce using rule 49 (E -> E barra E .)
    for             reduce using rule 49 (E -> E barra E .)
    break           reduce using rule 49 (E -> E barra E .)
    continue        reduce using rule 49 (E -> E barra E .)
    return          reduce using rule 49 (E -> E barra E .)
    local           reduce using rule 49 (E -> E barra E .)
    global          reduce using rule 49 (E -> E barra E .)
    puntoycoma      reduce using rule 49 (E -> E barra E .)
    tipo            reduce using rule 49 (E -> E barra E .)
    corB            reduce using rule 49 (E -> E barra E .)
    parB            reduce using rule 49 (E -> E barra E .)
    coma            reduce using rule 49 (E -> E barra E .)
    llaveB          reduce using rule 49 (E -> E barra E .)
    caret           shift and go to state 84

  ! caret           [ reduce using rule 49 (E -> E barra E .) ]
  ! mas             [ shift and go to state 80 ]
  ! menos           [ shift and go to state 81 ]
  ! asterisco       [ shift and go to state 82 ]
  ! barra           [ shift and go to state 83 ]
  ! modulo          [ shift and go to state 85 ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 129

    (50) E -> E caret E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mas             reduce using rule 50 (E -> E caret E .)
    menos           reduce using rule 50 (E -> E caret E .)
    asterisco       reduce using rule 50 (E -> E caret E .)
    barra           reduce using rule 50 (E -> E caret E .)
    modulo          reduce using rule 50 (E -> E caret E .)
    mayor           reduce using rule 50 (E -> E caret E .)
    menor           reduce using rule 50 (E -> E caret E .)
    mayor_igual     reduce using rule 50 (E -> E caret E .)
    menor_igual     reduce using rule 50 (E -> E caret E .)
    igualacion      reduce using rule 50 (E -> E caret E .)
    diferenciacion  reduce using rule 50 (E -> E caret E .)
    or              reduce using rule 50 (E -> E caret E .)
    and             reduce using rule 50 (E -> E caret E .)
    interrog        reduce using rule 50 (E -> E caret E .)
    dospuntos       reduce using rule 50 (E -> E caret E .)
    error           reduce using rule 50 (E -> E caret E .)
    function        reduce using rule 50 (E -> E caret E .)
    struct          reduce using rule 50 (E -> E caret E .)
    mutable         reduce using rule 50 (E -> E caret E .)
    id              reduce using rule 50 (E -> E caret E .)
    if              reduce using rule 50 (E -> E caret E .)
    while           reduce using rule 50 (E -> E caret E .)
    for             reduce using rule 50 (E -> E caret E .)
    break           reduce using rule 50 (E -> E caret E .)
    continue        reduce using rule 50 (E -> E caret E .)
    return          reduce using rule 50 (E -> E caret E .)
    local           reduce using rule 50 (E -> E caret E .)
    global          reduce using rule 50 (E -> E caret E .)
    puntoycoma      reduce using rule 50 (E -> E caret E .)
    tipo            reduce using rule 50 (E -> E caret E .)
    corB            reduce using rule 50 (E -> E caret E .)
    parB            reduce using rule 50 (E -> E caret E .)
    coma            reduce using rule 50 (E -> E caret E .)
    llaveB          reduce using rule 50 (E -> E caret E .)
    caret           shift and go to state 84

  ! caret           [ reduce using rule 50 (E -> E caret E .) ]
  ! mas             [ shift and go to state 80 ]
  ! menos           [ shift and go to state 81 ]
  ! asterisco       [ shift and go to state 82 ]
  ! barra           [ shift and go to state 83 ]
  ! modulo          [ shift and go to state 85 ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 130

    (51) E -> E modulo E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mas             reduce using rule 51 (E -> E modulo E .)
    menos           reduce using rule 51 (E -> E modulo E .)
    asterisco       reduce using rule 51 (E -> E modulo E .)
    barra           reduce using rule 51 (E -> E modulo E .)
    modulo          reduce using rule 51 (E -> E modulo E .)
    mayor           reduce using rule 51 (E -> E modulo E .)
    menor           reduce using rule 51 (E -> E modulo E .)
    mayor_igual     reduce using rule 51 (E -> E modulo E .)
    menor_igual     reduce using rule 51 (E -> E modulo E .)
    igualacion      reduce using rule 51 (E -> E modulo E .)
    diferenciacion  reduce using rule 51 (E -> E modulo E .)
    or              reduce using rule 51 (E -> E modulo E .)
    and             reduce using rule 51 (E -> E modulo E .)
    interrog        reduce using rule 51 (E -> E modulo E .)
    dospuntos       reduce using rule 51 (E -> E modulo E .)
    error           reduce using rule 51 (E -> E modulo E .)
    function        reduce using rule 51 (E -> E modulo E .)
    struct          reduce using rule 51 (E -> E modulo E .)
    mutable         reduce using rule 51 (E -> E modulo E .)
    id              reduce using rule 51 (E -> E modulo E .)
    if              reduce using rule 51 (E -> E modulo E .)
    while           reduce using rule 51 (E -> E modulo E .)
    for             reduce using rule 51 (E -> E modulo E .)
    break           reduce using rule 51 (E -> E modulo E .)
    continue        reduce using rule 51 (E -> E modulo E .)
    return          reduce using rule 51 (E -> E modulo E .)
    local           reduce using rule 51 (E -> E modulo E .)
    global          reduce using rule 51 (E -> E modulo E .)
    puntoycoma      reduce using rule 51 (E -> E modulo E .)
    tipo            reduce using rule 51 (E -> E modulo E .)
    corB            reduce using rule 51 (E -> E modulo E .)
    parB            reduce using rule 51 (E -> E modulo E .)
    coma            reduce using rule 51 (E -> E modulo E .)
    llaveB          reduce using rule 51 (E -> E modulo E .)
    caret           shift and go to state 84

  ! caret           [ reduce using rule 51 (E -> E modulo E .) ]
  ! mas             [ shift and go to state 80 ]
  ! menos           [ shift and go to state 81 ]
  ! asterisco       [ shift and go to state 82 ]
  ! barra           [ shift and go to state 83 ]
  ! modulo          [ shift and go to state 85 ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 131

    (53) E -> E mayor E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mayor           reduce using rule 53 (E -> E mayor E .)
    menor           reduce using rule 53 (E -> E mayor E .)
    mayor_igual     reduce using rule 53 (E -> E mayor E .)
    menor_igual     reduce using rule 53 (E -> E mayor E .)
    igualacion      reduce using rule 53 (E -> E mayor E .)
    diferenciacion  reduce using rule 53 (E -> E mayor E .)
    or              reduce using rule 53 (E -> E mayor E .)
    and             reduce using rule 53 (E -> E mayor E .)
    interrog        reduce using rule 53 (E -> E mayor E .)
    dospuntos       reduce using rule 53 (E -> E mayor E .)
    error           reduce using rule 53 (E -> E mayor E .)
    function        reduce using rule 53 (E -> E mayor E .)
    struct          reduce using rule 53 (E -> E mayor E .)
    mutable         reduce using rule 53 (E -> E mayor E .)
    id              reduce using rule 53 (E -> E mayor E .)
    if              reduce using rule 53 (E -> E mayor E .)
    while           reduce using rule 53 (E -> E mayor E .)
    for             reduce using rule 53 (E -> E mayor E .)
    break           reduce using rule 53 (E -> E mayor E .)
    continue        reduce using rule 53 (E -> E mayor E .)
    return          reduce using rule 53 (E -> E mayor E .)
    local           reduce using rule 53 (E -> E mayor E .)
    global          reduce using rule 53 (E -> E mayor E .)
    puntoycoma      reduce using rule 53 (E -> E mayor E .)
    tipo            reduce using rule 53 (E -> E mayor E .)
    corB            reduce using rule 53 (E -> E mayor E .)
    parB            reduce using rule 53 (E -> E mayor E .)
    coma            reduce using rule 53 (E -> E mayor E .)
    llaveB          reduce using rule 53 (E -> E mayor E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85

  ! mas             [ reduce using rule 53 (E -> E mayor E .) ]
  ! menos           [ reduce using rule 53 (E -> E mayor E .) ]
  ! asterisco       [ reduce using rule 53 (E -> E mayor E .) ]
  ! barra           [ reduce using rule 53 (E -> E mayor E .) ]
  ! caret           [ reduce using rule 53 (E -> E mayor E .) ]
  ! modulo          [ reduce using rule 53 (E -> E mayor E .) ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 132

    (54) E -> E menor E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mayor           reduce using rule 54 (E -> E menor E .)
    menor           reduce using rule 54 (E -> E menor E .)
    mayor_igual     reduce using rule 54 (E -> E menor E .)
    menor_igual     reduce using rule 54 (E -> E menor E .)
    igualacion      reduce using rule 54 (E -> E menor E .)
    diferenciacion  reduce using rule 54 (E -> E menor E .)
    or              reduce using rule 54 (E -> E menor E .)
    and             reduce using rule 54 (E -> E menor E .)
    interrog        reduce using rule 54 (E -> E menor E .)
    dospuntos       reduce using rule 54 (E -> E menor E .)
    error           reduce using rule 54 (E -> E menor E .)
    function        reduce using rule 54 (E -> E menor E .)
    struct          reduce using rule 54 (E -> E menor E .)
    mutable         reduce using rule 54 (E -> E menor E .)
    id              reduce using rule 54 (E -> E menor E .)
    if              reduce using rule 54 (E -> E menor E .)
    while           reduce using rule 54 (E -> E menor E .)
    for             reduce using rule 54 (E -> E menor E .)
    break           reduce using rule 54 (E -> E menor E .)
    continue        reduce using rule 54 (E -> E menor E .)
    return          reduce using rule 54 (E -> E menor E .)
    local           reduce using rule 54 (E -> E menor E .)
    global          reduce using rule 54 (E -> E menor E .)
    puntoycoma      reduce using rule 54 (E -> E menor E .)
    tipo            reduce using rule 54 (E -> E menor E .)
    corB            reduce using rule 54 (E -> E menor E .)
    parB            reduce using rule 54 (E -> E menor E .)
    coma            reduce using rule 54 (E -> E menor E .)
    llaveB          reduce using rule 54 (E -> E menor E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85

  ! mas             [ reduce using rule 54 (E -> E menor E .) ]
  ! menos           [ reduce using rule 54 (E -> E menor E .) ]
  ! asterisco       [ reduce using rule 54 (E -> E menor E .) ]
  ! barra           [ reduce using rule 54 (E -> E menor E .) ]
  ! caret           [ reduce using rule 54 (E -> E menor E .) ]
  ! modulo          [ reduce using rule 54 (E -> E menor E .) ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 133

    (55) E -> E mayor_igual E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mayor           reduce using rule 55 (E -> E mayor_igual E .)
    menor           reduce using rule 55 (E -> E mayor_igual E .)
    mayor_igual     reduce using rule 55 (E -> E mayor_igual E .)
    menor_igual     reduce using rule 55 (E -> E mayor_igual E .)
    igualacion      reduce using rule 55 (E -> E mayor_igual E .)
    diferenciacion  reduce using rule 55 (E -> E mayor_igual E .)
    or              reduce using rule 55 (E -> E mayor_igual E .)
    and             reduce using rule 55 (E -> E mayor_igual E .)
    interrog        reduce using rule 55 (E -> E mayor_igual E .)
    dospuntos       reduce using rule 55 (E -> E mayor_igual E .)
    error           reduce using rule 55 (E -> E mayor_igual E .)
    function        reduce using rule 55 (E -> E mayor_igual E .)
    struct          reduce using rule 55 (E -> E mayor_igual E .)
    mutable         reduce using rule 55 (E -> E mayor_igual E .)
    id              reduce using rule 55 (E -> E mayor_igual E .)
    if              reduce using rule 55 (E -> E mayor_igual E .)
    while           reduce using rule 55 (E -> E mayor_igual E .)
    for             reduce using rule 55 (E -> E mayor_igual E .)
    break           reduce using rule 55 (E -> E mayor_igual E .)
    continue        reduce using rule 55 (E -> E mayor_igual E .)
    return          reduce using rule 55 (E -> E mayor_igual E .)
    local           reduce using rule 55 (E -> E mayor_igual E .)
    global          reduce using rule 55 (E -> E mayor_igual E .)
    puntoycoma      reduce using rule 55 (E -> E mayor_igual E .)
    tipo            reduce using rule 55 (E -> E mayor_igual E .)
    corB            reduce using rule 55 (E -> E mayor_igual E .)
    parB            reduce using rule 55 (E -> E mayor_igual E .)
    coma            reduce using rule 55 (E -> E mayor_igual E .)
    llaveB          reduce using rule 55 (E -> E mayor_igual E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85

  ! mas             [ reduce using rule 55 (E -> E mayor_igual E .) ]
  ! menos           [ reduce using rule 55 (E -> E mayor_igual E .) ]
  ! asterisco       [ reduce using rule 55 (E -> E mayor_igual E .) ]
  ! barra           [ reduce using rule 55 (E -> E mayor_igual E .) ]
  ! caret           [ reduce using rule 55 (E -> E mayor_igual E .) ]
  ! modulo          [ reduce using rule 55 (E -> E mayor_igual E .) ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 134

    (56) E -> E menor_igual E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    mayor           reduce using rule 56 (E -> E menor_igual E .)
    menor           reduce using rule 56 (E -> E menor_igual E .)
    mayor_igual     reduce using rule 56 (E -> E menor_igual E .)
    menor_igual     reduce using rule 56 (E -> E menor_igual E .)
    igualacion      reduce using rule 56 (E -> E menor_igual E .)
    diferenciacion  reduce using rule 56 (E -> E menor_igual E .)
    or              reduce using rule 56 (E -> E menor_igual E .)
    and             reduce using rule 56 (E -> E menor_igual E .)
    interrog        reduce using rule 56 (E -> E menor_igual E .)
    dospuntos       reduce using rule 56 (E -> E menor_igual E .)
    error           reduce using rule 56 (E -> E menor_igual E .)
    function        reduce using rule 56 (E -> E menor_igual E .)
    struct          reduce using rule 56 (E -> E menor_igual E .)
    mutable         reduce using rule 56 (E -> E menor_igual E .)
    id              reduce using rule 56 (E -> E menor_igual E .)
    if              reduce using rule 56 (E -> E menor_igual E .)
    while           reduce using rule 56 (E -> E menor_igual E .)
    for             reduce using rule 56 (E -> E menor_igual E .)
    break           reduce using rule 56 (E -> E menor_igual E .)
    continue        reduce using rule 56 (E -> E menor_igual E .)
    return          reduce using rule 56 (E -> E menor_igual E .)
    local           reduce using rule 56 (E -> E menor_igual E .)
    global          reduce using rule 56 (E -> E menor_igual E .)
    puntoycoma      reduce using rule 56 (E -> E menor_igual E .)
    tipo            reduce using rule 56 (E -> E menor_igual E .)
    corB            reduce using rule 56 (E -> E menor_igual E .)
    parB            reduce using rule 56 (E -> E menor_igual E .)
    coma            reduce using rule 56 (E -> E menor_igual E .)
    llaveB          reduce using rule 56 (E -> E menor_igual E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85

  ! mas             [ reduce using rule 56 (E -> E menor_igual E .) ]
  ! menos           [ reduce using rule 56 (E -> E menor_igual E .) ]
  ! asterisco       [ reduce using rule 56 (E -> E menor_igual E .) ]
  ! barra           [ reduce using rule 56 (E -> E menor_igual E .) ]
  ! caret           [ reduce using rule 56 (E -> E menor_igual E .) ]
  ! modulo          [ reduce using rule 56 (E -> E menor_igual E .) ]
  ! mayor           [ shift and go to state 86 ]
  ! menor           [ shift and go to state 87 ]
  ! mayor_igual     [ shift and go to state 88 ]
  ! menor_igual     [ shift and go to state 89 ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 135

    (57) E -> E igualacion E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    igualacion      reduce using rule 57 (E -> E igualacion E .)
    diferenciacion  reduce using rule 57 (E -> E igualacion E .)
    or              reduce using rule 57 (E -> E igualacion E .)
    and             reduce using rule 57 (E -> E igualacion E .)
    interrog        reduce using rule 57 (E -> E igualacion E .)
    dospuntos       reduce using rule 57 (E -> E igualacion E .)
    error           reduce using rule 57 (E -> E igualacion E .)
    function        reduce using rule 57 (E -> E igualacion E .)
    struct          reduce using rule 57 (E -> E igualacion E .)
    mutable         reduce using rule 57 (E -> E igualacion E .)
    id              reduce using rule 57 (E -> E igualacion E .)
    if              reduce using rule 57 (E -> E igualacion E .)
    while           reduce using rule 57 (E -> E igualacion E .)
    for             reduce using rule 57 (E -> E igualacion E .)
    break           reduce using rule 57 (E -> E igualacion E .)
    continue        reduce using rule 57 (E -> E igualacion E .)
    return          reduce using rule 57 (E -> E igualacion E .)
    local           reduce using rule 57 (E -> E igualacion E .)
    global          reduce using rule 57 (E -> E igualacion E .)
    puntoycoma      reduce using rule 57 (E -> E igualacion E .)
    tipo            reduce using rule 57 (E -> E igualacion E .)
    corB            reduce using rule 57 (E -> E igualacion E .)
    parB            reduce using rule 57 (E -> E igualacion E .)
    coma            reduce using rule 57 (E -> E igualacion E .)
    llaveB          reduce using rule 57 (E -> E igualacion E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89

  ! mas             [ reduce using rule 57 (E -> E igualacion E .) ]
  ! menos           [ reduce using rule 57 (E -> E igualacion E .) ]
  ! asterisco       [ reduce using rule 57 (E -> E igualacion E .) ]
  ! barra           [ reduce using rule 57 (E -> E igualacion E .) ]
  ! caret           [ reduce using rule 57 (E -> E igualacion E .) ]
  ! modulo          [ reduce using rule 57 (E -> E igualacion E .) ]
  ! mayor           [ reduce using rule 57 (E -> E igualacion E .) ]
  ! menor           [ reduce using rule 57 (E -> E igualacion E .) ]
  ! mayor_igual     [ reduce using rule 57 (E -> E igualacion E .) ]
  ! menor_igual     [ reduce using rule 57 (E -> E igualacion E .) ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 136

    (58) E -> E diferenciacion E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    igualacion      reduce using rule 58 (E -> E diferenciacion E .)
    diferenciacion  reduce using rule 58 (E -> E diferenciacion E .)
    or              reduce using rule 58 (E -> E diferenciacion E .)
    and             reduce using rule 58 (E -> E diferenciacion E .)
    interrog        reduce using rule 58 (E -> E diferenciacion E .)
    dospuntos       reduce using rule 58 (E -> E diferenciacion E .)
    error           reduce using rule 58 (E -> E diferenciacion E .)
    function        reduce using rule 58 (E -> E diferenciacion E .)
    struct          reduce using rule 58 (E -> E diferenciacion E .)
    mutable         reduce using rule 58 (E -> E diferenciacion E .)
    id              reduce using rule 58 (E -> E diferenciacion E .)
    if              reduce using rule 58 (E -> E diferenciacion E .)
    while           reduce using rule 58 (E -> E diferenciacion E .)
    for             reduce using rule 58 (E -> E diferenciacion E .)
    break           reduce using rule 58 (E -> E diferenciacion E .)
    continue        reduce using rule 58 (E -> E diferenciacion E .)
    return          reduce using rule 58 (E -> E diferenciacion E .)
    local           reduce using rule 58 (E -> E diferenciacion E .)
    global          reduce using rule 58 (E -> E diferenciacion E .)
    puntoycoma      reduce using rule 58 (E -> E diferenciacion E .)
    tipo            reduce using rule 58 (E -> E diferenciacion E .)
    corB            reduce using rule 58 (E -> E diferenciacion E .)
    parB            reduce using rule 58 (E -> E diferenciacion E .)
    coma            reduce using rule 58 (E -> E diferenciacion E .)
    llaveB          reduce using rule 58 (E -> E diferenciacion E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89

  ! mas             [ reduce using rule 58 (E -> E diferenciacion E .) ]
  ! menos           [ reduce using rule 58 (E -> E diferenciacion E .) ]
  ! asterisco       [ reduce using rule 58 (E -> E diferenciacion E .) ]
  ! barra           [ reduce using rule 58 (E -> E diferenciacion E .) ]
  ! caret           [ reduce using rule 58 (E -> E diferenciacion E .) ]
  ! modulo          [ reduce using rule 58 (E -> E diferenciacion E .) ]
  ! mayor           [ reduce using rule 58 (E -> E diferenciacion E .) ]
  ! menor           [ reduce using rule 58 (E -> E diferenciacion E .) ]
  ! mayor_igual     [ reduce using rule 58 (E -> E diferenciacion E .) ]
  ! menor_igual     [ reduce using rule 58 (E -> E diferenciacion E .) ]
  ! igualacion      [ shift and go to state 90 ]
  ! diferenciacion  [ shift and go to state 91 ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 137

    (59) E -> E or E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    or              reduce using rule 59 (E -> E or E .)
    interrog        reduce using rule 59 (E -> E or E .)
    dospuntos       reduce using rule 59 (E -> E or E .)
    error           reduce using rule 59 (E -> E or E .)
    function        reduce using rule 59 (E -> E or E .)
    struct          reduce using rule 59 (E -> E or E .)
    mutable         reduce using rule 59 (E -> E or E .)
    id              reduce using rule 59 (E -> E or E .)
    if              reduce using rule 59 (E -> E or E .)
    while           reduce using rule 59 (E -> E or E .)
    for             reduce using rule 59 (E -> E or E .)
    break           reduce using rule 59 (E -> E or E .)
    continue        reduce using rule 59 (E -> E or E .)
    return          reduce using rule 59 (E -> E or E .)
    local           reduce using rule 59 (E -> E or E .)
    global          reduce using rule 59 (E -> E or E .)
    puntoycoma      reduce using rule 59 (E -> E or E .)
    tipo            reduce using rule 59 (E -> E or E .)
    corB            reduce using rule 59 (E -> E or E .)
    parB            reduce using rule 59 (E -> E or E .)
    coma            reduce using rule 59 (E -> E or E .)
    llaveB          reduce using rule 59 (E -> E or E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    and             shift and go to state 93

  ! mas             [ reduce using rule 59 (E -> E or E .) ]
  ! menos           [ reduce using rule 59 (E -> E or E .) ]
  ! asterisco       [ reduce using rule 59 (E -> E or E .) ]
  ! barra           [ reduce using rule 59 (E -> E or E .) ]
  ! caret           [ reduce using rule 59 (E -> E or E .) ]
  ! modulo          [ reduce using rule 59 (E -> E or E .) ]
  ! mayor           [ reduce using rule 59 (E -> E or E .) ]
  ! menor           [ reduce using rule 59 (E -> E or E .) ]
  ! mayor_igual     [ reduce using rule 59 (E -> E or E .) ]
  ! menor_igual     [ reduce using rule 59 (E -> E or E .) ]
  ! igualacion      [ reduce using rule 59 (E -> E or E .) ]
  ! diferenciacion  [ reduce using rule 59 (E -> E or E .) ]
  ! and             [ reduce using rule 59 (E -> E or E .) ]
  ! or              [ shift and go to state 92 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 138

    (60) E -> E and E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    or              reduce using rule 60 (E -> E and E .)
    and             reduce using rule 60 (E -> E and E .)
    interrog        reduce using rule 60 (E -> E and E .)
    dospuntos       reduce using rule 60 (E -> E and E .)
    error           reduce using rule 60 (E -> E and E .)
    function        reduce using rule 60 (E -> E and E .)
    struct          reduce using rule 60 (E -> E and E .)
    mutable         reduce using rule 60 (E -> E and E .)
    id              reduce using rule 60 (E -> E and E .)
    if              reduce using rule 60 (E -> E and E .)
    while           reduce using rule 60 (E -> E and E .)
    for             reduce using rule 60 (E -> E and E .)
    break           reduce using rule 60 (E -> E and E .)
    continue        reduce using rule 60 (E -> E and E .)
    return          reduce using rule 60 (E -> E and E .)
    local           reduce using rule 60 (E -> E and E .)
    global          reduce using rule 60 (E -> E and E .)
    puntoycoma      reduce using rule 60 (E -> E and E .)
    tipo            reduce using rule 60 (E -> E and E .)
    corB            reduce using rule 60 (E -> E and E .)
    parB            reduce using rule 60 (E -> E and E .)
    coma            reduce using rule 60 (E -> E and E .)
    llaveB          reduce using rule 60 (E -> E and E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91

  ! mas             [ reduce using rule 60 (E -> E and E .) ]
  ! menos           [ reduce using rule 60 (E -> E and E .) ]
  ! asterisco       [ reduce using rule 60 (E -> E and E .) ]
  ! barra           [ reduce using rule 60 (E -> E and E .) ]
  ! caret           [ reduce using rule 60 (E -> E and E .) ]
  ! modulo          [ reduce using rule 60 (E -> E and E .) ]
  ! mayor           [ reduce using rule 60 (E -> E and E .) ]
  ! menor           [ reduce using rule 60 (E -> E and E .) ]
  ! mayor_igual     [ reduce using rule 60 (E -> E and E .) ]
  ! menor_igual     [ reduce using rule 60 (E -> E and E .) ]
  ! igualacion      [ reduce using rule 60 (E -> E and E .) ]
  ! diferenciacion  [ reduce using rule 60 (E -> E and E .) ]
  ! or              [ shift and go to state 92 ]
  ! and             [ shift and go to state 93 ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 139

    (62) E -> E interrog E . dospuntos E
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    dospuntos       shift and go to state 161
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94


state 140

    (91) RANGO -> E dospuntos E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

  ! shift/reduce conflict for mas resolved as shift
  ! shift/reduce conflict for menos resolved as shift
  ! shift/reduce conflict for asterisco resolved as shift
  ! shift/reduce conflict for barra resolved as shift
  ! shift/reduce conflict for caret resolved as shift
  ! shift/reduce conflict for modulo resolved as shift
  ! shift/reduce conflict for mayor resolved as shift
  ! shift/reduce conflict for menor resolved as shift
  ! shift/reduce conflict for mayor_igual resolved as shift
  ! shift/reduce conflict for menor_igual resolved as shift
  ! shift/reduce conflict for igualacion resolved as shift
  ! shift/reduce conflict for diferenciacion resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for interrog resolved as shift
  ! shift/reduce conflict for dospuntos resolved as shift
    error           reduce using rule 91 (RANGO -> E dospuntos E .)
    function        reduce using rule 91 (RANGO -> E dospuntos E .)
    struct          reduce using rule 91 (RANGO -> E dospuntos E .)
    mutable         reduce using rule 91 (RANGO -> E dospuntos E .)
    id              reduce using rule 91 (RANGO -> E dospuntos E .)
    if              reduce using rule 91 (RANGO -> E dospuntos E .)
    while           reduce using rule 91 (RANGO -> E dospuntos E .)
    for             reduce using rule 91 (RANGO -> E dospuntos E .)
    break           reduce using rule 91 (RANGO -> E dospuntos E .)
    continue        reduce using rule 91 (RANGO -> E dospuntos E .)
    return          reduce using rule 91 (RANGO -> E dospuntos E .)
    local           reduce using rule 91 (RANGO -> E dospuntos E .)
    global          reduce using rule 91 (RANGO -> E dospuntos E .)
    puntoycoma      reduce using rule 91 (RANGO -> E dospuntos E .)
    tipo            reduce using rule 91 (RANGO -> E dospuntos E .)
    corB            reduce using rule 91 (RANGO -> E dospuntos E .)
    parB            reduce using rule 91 (RANGO -> E dospuntos E .)
    coma            reduce using rule 91 (RANGO -> E dospuntos E .)
    llaveB          reduce using rule 91 (RANGO -> E dospuntos E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95

  ! mas             [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! menos           [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! asterisco       [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! barra           [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! caret           [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! modulo          [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! mayor           [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! menor           [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! mayor_igual     [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! menor_igual     [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! igualacion      [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! diferenciacion  [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! or              [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! and             [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! interrog        [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! dospuntos       [ reduce using rule 91 (RANGO -> E dospuntos E .) ]


state 141

    (15) BLOQUE -> INS end .

    puntoycoma      reduce using rule 15 (BLOQUE -> INS end .)


state 142

    (64) E -> parA E parB .

    mas             reduce using rule 64 (E -> parA E parB .)
    menos           reduce using rule 64 (E -> parA E parB .)
    asterisco       reduce using rule 64 (E -> parA E parB .)
    barra           reduce using rule 64 (E -> parA E parB .)
    caret           reduce using rule 64 (E -> parA E parB .)
    modulo          reduce using rule 64 (E -> parA E parB .)
    mayor           reduce using rule 64 (E -> parA E parB .)
    menor           reduce using rule 64 (E -> parA E parB .)
    mayor_igual     reduce using rule 64 (E -> parA E parB .)
    menor_igual     reduce using rule 64 (E -> parA E parB .)
    igualacion      reduce using rule 64 (E -> parA E parB .)
    diferenciacion  reduce using rule 64 (E -> parA E parB .)
    or              reduce using rule 64 (E -> parA E parB .)
    and             reduce using rule 64 (E -> parA E parB .)
    interrog        reduce using rule 64 (E -> parA E parB .)
    dospuntos       reduce using rule 64 (E -> parA E parB .)
    error           reduce using rule 64 (E -> parA E parB .)
    function        reduce using rule 64 (E -> parA E parB .)
    struct          reduce using rule 64 (E -> parA E parB .)
    mutable         reduce using rule 64 (E -> parA E parB .)
    id              reduce using rule 64 (E -> parA E parB .)
    if              reduce using rule 64 (E -> parA E parB .)
    while           reduce using rule 64 (E -> parA E parB .)
    for             reduce using rule 64 (E -> parA E parB .)
    break           reduce using rule 64 (E -> parA E parB .)
    continue        reduce using rule 64 (E -> parA E parB .)
    return          reduce using rule 64 (E -> parA E parB .)
    local           reduce using rule 64 (E -> parA E parB .)
    global          reduce using rule 64 (E -> parA E parB .)
    puntoycoma      reduce using rule 64 (E -> parA E parB .)
    tipo            reduce using rule 64 (E -> parA E parB .)
    corB            reduce using rule 64 (E -> parA E parB .)
    parB            reduce using rule 64 (E -> parA E parB .)
    coma            reduce using rule 64 (E -> parA E parB .)
    llaveB          reduce using rule 64 (E -> parA E parB .)


state 143

    (78) ARREGLO -> corA EXP corB .

    mas             reduce using rule 78 (ARREGLO -> corA EXP corB .)
    menos           reduce using rule 78 (ARREGLO -> corA EXP corB .)
    asterisco       reduce using rule 78 (ARREGLO -> corA EXP corB .)
    barra           reduce using rule 78 (ARREGLO -> corA EXP corB .)
    caret           reduce using rule 78 (ARREGLO -> corA EXP corB .)
    modulo          reduce using rule 78 (ARREGLO -> corA EXP corB .)
    mayor           reduce using rule 78 (ARREGLO -> corA EXP corB .)
    menor           reduce using rule 78 (ARREGLO -> corA EXP corB .)
    mayor_igual     reduce using rule 78 (ARREGLO -> corA EXP corB .)
    menor_igual     reduce using rule 78 (ARREGLO -> corA EXP corB .)
    igualacion      reduce using rule 78 (ARREGLO -> corA EXP corB .)
    diferenciacion  reduce using rule 78 (ARREGLO -> corA EXP corB .)
    or              reduce using rule 78 (ARREGLO -> corA EXP corB .)
    and             reduce using rule 78 (ARREGLO -> corA EXP corB .)
    interrog        reduce using rule 78 (ARREGLO -> corA EXP corB .)
    dospuntos       reduce using rule 78 (ARREGLO -> corA EXP corB .)
    error           reduce using rule 78 (ARREGLO -> corA EXP corB .)
    function        reduce using rule 78 (ARREGLO -> corA EXP corB .)
    struct          reduce using rule 78 (ARREGLO -> corA EXP corB .)
    mutable         reduce using rule 78 (ARREGLO -> corA EXP corB .)
    id              reduce using rule 78 (ARREGLO -> corA EXP corB .)
    if              reduce using rule 78 (ARREGLO -> corA EXP corB .)
    while           reduce using rule 78 (ARREGLO -> corA EXP corB .)
    for             reduce using rule 78 (ARREGLO -> corA EXP corB .)
    break           reduce using rule 78 (ARREGLO -> corA EXP corB .)
    continue        reduce using rule 78 (ARREGLO -> corA EXP corB .)
    return          reduce using rule 78 (ARREGLO -> corA EXP corB .)
    local           reduce using rule 78 (ARREGLO -> corA EXP corB .)
    global          reduce using rule 78 (ARREGLO -> corA EXP corB .)
    puntoycoma      reduce using rule 78 (ARREGLO -> corA EXP corB .)
    tipo            reduce using rule 78 (ARREGLO -> corA EXP corB .)
    corB            reduce using rule 78 (ARREGLO -> corA EXP corB .)
    parB            reduce using rule 78 (ARREGLO -> corA EXP corB .)
    coma            reduce using rule 78 (ARREGLO -> corA EXP corB .)
    llaveB          reduce using rule 78 (ARREGLO -> corA EXP corB .)


state 144

    (77) S -> llaveA E llaveB .

    string          reduce using rule 77 (S -> llaveA E llaveB .)
    llaveA          reduce using rule 77 (S -> llaveA E llaveB .)
    mas             reduce using rule 77 (S -> llaveA E llaveB .)
    menos           reduce using rule 77 (S -> llaveA E llaveB .)
    asterisco       reduce using rule 77 (S -> llaveA E llaveB .)
    barra           reduce using rule 77 (S -> llaveA E llaveB .)
    caret           reduce using rule 77 (S -> llaveA E llaveB .)
    modulo          reduce using rule 77 (S -> llaveA E llaveB .)
    mayor           reduce using rule 77 (S -> llaveA E llaveB .)
    menor           reduce using rule 77 (S -> llaveA E llaveB .)
    mayor_igual     reduce using rule 77 (S -> llaveA E llaveB .)
    menor_igual     reduce using rule 77 (S -> llaveA E llaveB .)
    igualacion      reduce using rule 77 (S -> llaveA E llaveB .)
    diferenciacion  reduce using rule 77 (S -> llaveA E llaveB .)
    or              reduce using rule 77 (S -> llaveA E llaveB .)
    and             reduce using rule 77 (S -> llaveA E llaveB .)
    interrog        reduce using rule 77 (S -> llaveA E llaveB .)
    dospuntos       reduce using rule 77 (S -> llaveA E llaveB .)
    error           reduce using rule 77 (S -> llaveA E llaveB .)
    function        reduce using rule 77 (S -> llaveA E llaveB .)
    struct          reduce using rule 77 (S -> llaveA E llaveB .)
    mutable         reduce using rule 77 (S -> llaveA E llaveB .)
    id              reduce using rule 77 (S -> llaveA E llaveB .)
    if              reduce using rule 77 (S -> llaveA E llaveB .)
    while           reduce using rule 77 (S -> llaveA E llaveB .)
    for             reduce using rule 77 (S -> llaveA E llaveB .)
    break           reduce using rule 77 (S -> llaveA E llaveB .)
    continue        reduce using rule 77 (S -> llaveA E llaveB .)
    return          reduce using rule 77 (S -> llaveA E llaveB .)
    local           reduce using rule 77 (S -> llaveA E llaveB .)
    global          reduce using rule 77 (S -> llaveA E llaveB .)
    puntoycoma      reduce using rule 77 (S -> llaveA E llaveB .)
    tipo            reduce using rule 77 (S -> llaveA E llaveB .)
    corB            reduce using rule 77 (S -> llaveA E llaveB .)
    parB            reduce using rule 77 (S -> llaveA E llaveB .)
    coma            reduce using rule 77 (S -> llaveA E llaveB .)
    llaveB          reduce using rule 77 (S -> llaveA E llaveB .)


state 145

    (90) FOR -> for id in E . BLOQUE
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E
    (15) BLOQUE -> . INS end
    (1) INS -> . INS I puntoycoma
    (2) INS -> . I puntoycoma
    (3) INS -> . INS error puntoycoma
    (4) INS -> . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95
    error           shift and go to state 3
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    BLOQUE                         shift and go to state 162
    INS                            shift and go to state 105
    I                              shift and go to state 2
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 146

    (28) ASIGNACION_VALOR -> E tipo TIPO .

    puntoycoma      reduce using rule 28 (ASIGNACION_VALOR -> E tipo TIPO .)


state 147

    (17) TIPO -> Int64 .

    puntoycoma      reduce using rule 17 (TIPO -> Int64 .)
    parB            reduce using rule 17 (TIPO -> Int64 .)
    coma            reduce using rule 17 (TIPO -> Int64 .)


state 148

    (18) TIPO -> Float64 .

    puntoycoma      reduce using rule 18 (TIPO -> Float64 .)
    parB            reduce using rule 18 (TIPO -> Float64 .)
    coma            reduce using rule 18 (TIPO -> Float64 .)


state 149

    (19) TIPO -> Bool .

    puntoycoma      reduce using rule 19 (TIPO -> Bool .)
    parB            reduce using rule 19 (TIPO -> Bool .)
    coma            reduce using rule 19 (TIPO -> Bool .)


state 150

    (20) TIPO -> Char .

    puntoycoma      reduce using rule 20 (TIPO -> Char .)
    parB            reduce using rule 20 (TIPO -> Char .)
    coma            reduce using rule 20 (TIPO -> Char .)


state 151

    (21) TIPO -> String .

    puntoycoma      reduce using rule 21 (TIPO -> String .)
    parB            reduce using rule 21 (TIPO -> String .)
    coma            reduce using rule 21 (TIPO -> String .)


state 152

    (44) EXP -> EXP coma E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

    parB            reduce using rule 44 (EXP -> EXP coma E .)
    coma            reduce using rule 44 (EXP -> EXP coma E .)
    corB            reduce using rule 44 (EXP -> EXP coma E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95


state 153

    (37) P -> id tipo . TIPO
    (17) TIPO -> . Int64
    (18) TIPO -> . Float64
    (19) TIPO -> . Bool
    (20) TIPO -> . Char
    (21) TIPO -> . String

    Int64           shift and go to state 147
    Float64         shift and go to state 148
    Bool            shift and go to state 149
    Char            shift and go to state 150
    String          shift and go to state 151

    TIPO                           shift and go to state 163

state 154

    (32) FUNCION -> function id parA PAR parB . BLOQUE
    (15) BLOQUE -> . INS end
    (1) INS -> . INS I puntoycoma
    (2) INS -> . I puntoycoma
    (3) INS -> . INS error puntoycoma
    (4) INS -> . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    error           shift and go to state 3
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    BLOQUE                         shift and go to state 164
    INS                            shift and go to state 105
    I                              shift and go to state 2
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 155

    (34) PAR -> PAR coma . P
    (36) P -> . id
    (37) P -> . id tipo TIPO

    id              shift and go to state 112

    P                              shift and go to state 165

state 156

    (33) FUNCION -> function id parA parB BLOQUE .

    puntoycoma      reduce using rule 33 (FUNCION -> function id parA parB BLOQUE .)


state 157

    (42) A -> id tipo TIPO . puntoycoma

    puntoycoma      shift and go to state 166


state 158

    (39) STRUCT -> mutable struct id ATR end .

    puntoycoma      reduce using rule 39 (STRUCT -> mutable struct id ATR end .)


state 159

    (88) ELSE -> else BLOQUE .

    puntoycoma      reduce using rule 88 (ELSE -> else BLOQUE .)


state 160

    (85) ELSEIF -> elseif E . BLOQUE
    (86) ELSEIF -> elseif E . BLOQUE_ABIERTO ELSEIF
    (87) ELSEIF -> elseif E . BLOQUE_ABIERTO ELSE
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E
    (15) BLOQUE -> . INS end
    (16) BLOQUE_ABIERTO -> . INS
    (1) INS -> . INS I puntoycoma
    (2) INS -> . I puntoycoma
    (3) INS -> . INS error puntoycoma
    (4) INS -> . error puntoycoma
    (5) I -> . ASIGNACION
    (6) I -> . FUNCION
    (7) I -> . STRUCT
    (8) I -> . LLAMADA
    (9) I -> . IF
    (10) I -> . WHILE
    (11) I -> . FOR
    (12) I -> . BREAK
    (13) I -> . CONTINUE
    (14) I -> . RETURN
    (24) ASIGNACION -> . ID igual ASIGNACION_VALOR
    (25) ASIGNACION -> . SCOPE id igual ASIGNACION_VALOR
    (26) ASIGNACION -> . SCOPE id
    (32) FUNCION -> . function id parA PAR parB BLOQUE
    (33) FUNCION -> . function id parA parB BLOQUE
    (38) STRUCT -> . struct id ATR end
    (39) STRUCT -> . mutable struct id ATR end
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (82) IF -> . if E BLOQUE
    (83) IF -> . if E BLOQUE_ABIERTO ELSE
    (84) IF -> . if E BLOQUE_ABIERTO ELSEIF
    (89) WHILE -> . while E BLOQUE
    (90) FOR -> . for id in E BLOQUE
    (93) BREAK -> . break
    (94) CONTINUE -> . continue
    (95) RETURN -> . return E
    (96) RETURN -> . return
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (22) SCOPE -> . local
    (23) SCOPE -> . global

    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93
    interrog        shift and go to state 94
    dospuntos       shift and go to state 95
    error           shift and go to state 3
    function        shift and go to state 17
    struct          shift and go to state 18
    mutable         shift and go to state 19
    id              shift and go to state 16
    if              shift and go to state 20
    while           shift and go to state 21
    for             shift and go to state 22
    break           shift and go to state 23
    continue        shift and go to state 24
    return          shift and go to state 25
    local           shift and go to state 26
    global          shift and go to state 27

    BLOQUE                         shift and go to state 167
    BLOQUE_ABIERTO                 shift and go to state 168
    INS                            shift and go to state 96
    I                              shift and go to state 2
    ASIGNACION                     shift and go to state 4
    FUNCION                        shift and go to state 5
    STRUCT                         shift and go to state 6
    LLAMADA                        shift and go to state 7
    IF                             shift and go to state 8
    WHILE                          shift and go to state 9
    FOR                            shift and go to state 10
    BREAK                          shift and go to state 11
    CONTINUE                       shift and go to state 12
    RETURN                         shift and go to state 13
    ID                             shift and go to state 14
    SCOPE                          shift and go to state 15

state 161

    (62) E -> E interrog E dospuntos . E
    (91) RANGO -> E dospuntos . E
    (46) E -> . E mas E
    (47) E -> . E menos E
    (48) E -> . E asterisco E
    (49) E -> . E barra E
    (50) E -> . E caret E
    (51) E -> . E modulo E
    (52) E -> . menos E
    (53) E -> . E mayor E
    (54) E -> . E menor E
    (55) E -> . E mayor_igual E
    (56) E -> . E menor_igual E
    (57) E -> . E igualacion E
    (58) E -> . E diferenciacion E
    (59) E -> . E or E
    (60) E -> . E and E
    (61) E -> . not E
    (62) E -> . E interrog E dospuntos E
    (63) E -> . ID
    (64) E -> . parA E parB
    (65) E -> . LLAMADA
    (66) E -> . RANGO
    (67) E -> . ARREGLO
    (68) E -> . int64
    (69) E -> . float64
    (70) E -> . bool
    (71) E -> . char
    (72) E -> . STRING
    (73) E -> . Nothing
    (29) ID -> . ID punto id
    (30) ID -> . ID corA E corB
    (31) ID -> . id
    (80) LLAMADA -> . id parA EXP parB
    (81) LLAMADA -> . id parA parB
    (91) RANGO -> . E dospuntos E
    (92) RANGO -> . dospuntos
    (78) ARREGLO -> . corA EXP corB
    (79) ARREGLO -> . corA corB
    (74) STRING -> . STRING S
    (75) STRING -> . S
    (76) S -> . string
    (77) S -> . llaveA E llaveB

    menos           shift and go to state 41
    not             shift and go to state 42
    parA            shift and go to state 45
    int64           shift and go to state 49
    float64         shift and go to state 50
    bool            shift and go to state 51
    char            shift and go to state 52
    Nothing         shift and go to state 54
    id              shift and go to state 55
    dospuntos       shift and go to state 43
    corA            shift and go to state 56
    string          shift and go to state 58
    llaveA          shift and go to state 59

    E                              shift and go to state 169
    ID                             shift and go to state 44
    LLAMADA                        shift and go to state 46
    RANGO                          shift and go to state 47
    ARREGLO                        shift and go to state 48
    STRING                         shift and go to state 53
    S                              shift and go to state 57

state 162

    (90) FOR -> for id in E BLOQUE .

    puntoycoma      reduce using rule 90 (FOR -> for id in E BLOQUE .)


state 163

    (37) P -> id tipo TIPO .

    parB            reduce using rule 37 (P -> id tipo TIPO .)
    coma            reduce using rule 37 (P -> id tipo TIPO .)


state 164

    (32) FUNCION -> function id parA PAR parB BLOQUE .

    puntoycoma      reduce using rule 32 (FUNCION -> function id parA PAR parB BLOQUE .)


state 165

    (34) PAR -> PAR coma P .

    parB            reduce using rule 34 (PAR -> PAR coma P .)
    coma            reduce using rule 34 (PAR -> PAR coma P .)


state 166

    (42) A -> id tipo TIPO puntoycoma .

    end             reduce using rule 42 (A -> id tipo TIPO puntoycoma .)
    id              reduce using rule 42 (A -> id tipo TIPO puntoycoma .)


state 167

    (85) ELSEIF -> elseif E BLOQUE .

    puntoycoma      reduce using rule 85 (ELSEIF -> elseif E BLOQUE .)


state 168

    (86) ELSEIF -> elseif E BLOQUE_ABIERTO . ELSEIF
    (87) ELSEIF -> elseif E BLOQUE_ABIERTO . ELSE
    (85) ELSEIF -> . elseif E BLOQUE
    (86) ELSEIF -> . elseif E BLOQUE_ABIERTO ELSEIF
    (87) ELSEIF -> . elseif E BLOQUE_ABIERTO ELSE
    (88) ELSE -> . else BLOQUE

    elseif          shift and go to state 124
    else            shift and go to state 123

    ELSEIF                         shift and go to state 170
    ELSE                           shift and go to state 171

state 169

    (62) E -> E interrog E dospuntos E .
    (91) RANGO -> E dospuntos E .
    (46) E -> E . mas E
    (47) E -> E . menos E
    (48) E -> E . asterisco E
    (49) E -> E . barra E
    (50) E -> E . caret E
    (51) E -> E . modulo E
    (53) E -> E . mayor E
    (54) E -> E . menor E
    (55) E -> E . mayor_igual E
    (56) E -> E . menor_igual E
    (57) E -> E . igualacion E
    (58) E -> E . diferenciacion E
    (59) E -> E . or E
    (60) E -> E . and E
    (62) E -> E . interrog E dospuntos E
    (91) RANGO -> E . dospuntos E

  ! reduce/reduce conflict for dospuntos resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for mas resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for menos resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for asterisco resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for barra resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for caret resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for modulo resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for mayor resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for menor resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for mayor_igual resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for menor_igual resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for igualacion resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for diferenciacion resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for or resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for and resolved using rule 62 (E -> E interrog E dospuntos E .)
  ! reduce/reduce conflict for interrog resolved using rule 62 (E -> E interrog E dospuntos E .)
    interrog        reduce using rule 62 (E -> E interrog E dospuntos E .)
    dospuntos       reduce using rule 62 (E -> E interrog E dospuntos E .)
    error           reduce using rule 62 (E -> E interrog E dospuntos E .)
    function        reduce using rule 62 (E -> E interrog E dospuntos E .)
    struct          reduce using rule 62 (E -> E interrog E dospuntos E .)
    mutable         reduce using rule 62 (E -> E interrog E dospuntos E .)
    id              reduce using rule 62 (E -> E interrog E dospuntos E .)
    if              reduce using rule 62 (E -> E interrog E dospuntos E .)
    while           reduce using rule 62 (E -> E interrog E dospuntos E .)
    for             reduce using rule 62 (E -> E interrog E dospuntos E .)
    break           reduce using rule 62 (E -> E interrog E dospuntos E .)
    continue        reduce using rule 62 (E -> E interrog E dospuntos E .)
    return          reduce using rule 62 (E -> E interrog E dospuntos E .)
    local           reduce using rule 62 (E -> E interrog E dospuntos E .)
    global          reduce using rule 62 (E -> E interrog E dospuntos E .)
    puntoycoma      reduce using rule 62 (E -> E interrog E dospuntos E .)
    tipo            reduce using rule 62 (E -> E interrog E dospuntos E .)
    corB            reduce using rule 62 (E -> E interrog E dospuntos E .)
    parB            reduce using rule 62 (E -> E interrog E dospuntos E .)
    coma            reduce using rule 62 (E -> E interrog E dospuntos E .)
    llaveB          reduce using rule 62 (E -> E interrog E dospuntos E .)
    mas             shift and go to state 80
    menos           shift and go to state 81
    asterisco       shift and go to state 82
    barra           shift and go to state 83
    caret           shift and go to state 84
    modulo          shift and go to state 85
    mayor           shift and go to state 86
    menor           shift and go to state 87
    mayor_igual     shift and go to state 88
    menor_igual     shift and go to state 89
    igualacion      shift and go to state 90
    diferenciacion  shift and go to state 91
    or              shift and go to state 92
    and             shift and go to state 93

  ! mas             [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! menos           [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! asterisco       [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! barra           [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! caret           [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! modulo          [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! mayor           [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! menor           [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! mayor_igual     [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! menor_igual     [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! igualacion      [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! diferenciacion  [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! or              [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! and             [ reduce using rule 62 (E -> E interrog E dospuntos E .) ]
  ! dospuntos       [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! mas             [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! menos           [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! asterisco       [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! barra           [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! caret           [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! modulo          [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! mayor           [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! menor           [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! mayor_igual     [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! menor_igual     [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! igualacion      [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! diferenciacion  [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! or              [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! and             [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! interrog        [ reduce using rule 91 (RANGO -> E dospuntos E .) ]
  ! interrog        [ shift and go to state 94 ]
  ! dospuntos       [ shift and go to state 95 ]


state 170

    (86) ELSEIF -> elseif E BLOQUE_ABIERTO ELSEIF .

    puntoycoma      reduce using rule 86 (ELSEIF -> elseif E BLOQUE_ABIERTO ELSEIF .)


state 171

    (87) ELSEIF -> elseif E BLOQUE_ABIERTO ELSE .

    puntoycoma      reduce using rule 87 (ELSEIF -> elseif E BLOQUE_ABIERTO ELSE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for mas in state 140 resolved as shift
WARNING: shift/reduce conflict for menos in state 140 resolved as shift
WARNING: shift/reduce conflict for asterisco in state 140 resolved as shift
WARNING: shift/reduce conflict for barra in state 140 resolved as shift
WARNING: shift/reduce conflict for caret in state 140 resolved as shift
WARNING: shift/reduce conflict for modulo in state 140 resolved as shift
WARNING: shift/reduce conflict for mayor in state 140 resolved as shift
WARNING: shift/reduce conflict for menor in state 140 resolved as shift
WARNING: shift/reduce conflict for mayor_igual in state 140 resolved as shift
WARNING: shift/reduce conflict for menor_igual in state 140 resolved as shift
WARNING: shift/reduce conflict for igualacion in state 140 resolved as shift
WARNING: shift/reduce conflict for diferenciacion in state 140 resolved as shift
WARNING: shift/reduce conflict for or in state 140 resolved as shift
WARNING: shift/reduce conflict for and in state 140 resolved as shift
WARNING: shift/reduce conflict for interrog in state 140 resolved as shift
WARNING: shift/reduce conflict for dospuntos in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 169 resolved using rule (E -> E interrog E dospuntos E)
WARNING: rejected rule (RANGO -> E dospuntos E) in state 169
